{"/home/travis/build/npmtest/node-npmtest-systemjs/test.js":"/* istanbul instrument in package npmtest_systemjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-systemjs/lib.npmtest_systemjs.js":"/* istanbul instrument in package npmtest_systemjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_systemjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_systemjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-systemjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-systemjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_systemjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_systemjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_systemjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_systemjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_systemjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_systemjs.__dirname + '/lib.npmtest_systemjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-systemjs/node_modules/systemjs/dist/system.src.js":"/*\n * SystemJS v0.20.12 Dev\n */\n(function () {\n'use strict';\n\n/*\n * Environment\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nvar isNode = typeof process !== 'undefined' && process.versions && process.versions.node;\nvar isWindows = typeof process !== 'undefined' && typeof process.platform === 'string' && process.platform.match(/^win/);\n\nvar envGlobal = typeof self !== 'undefined' ? self : global;\n/*\n * Simple Symbol() shim\n */\nvar hasSymbol = typeof Symbol !== 'undefined';\nfunction createSymbol (name) {\n  return hasSymbol ? Symbol() : '@@' + name;\n}\n\n\n\n\n\n/*\n * Environment baseURI\n */\nvar baseURI;\n\n// environent baseURI detection\nif (typeof document != 'undefined' && document.getElementsByTagName) {\n  baseURI = document.baseURI;\n\n  if (!baseURI) {\n    var bases = document.getElementsByTagName('base');\n    baseURI = bases[0] && bases[0].href || window.location.href;\n  }\n}\nelse if (typeof location != 'undefined') {\n  baseURI = location.href;\n}\n\n// sanitize out the hash and querystring\nif (baseURI) {\n  baseURI = baseURI.split('#')[0].split('?')[0];\n  var slashIndex = baseURI.lastIndexOf('/');\n  if (slashIndex !== -1)\n    baseURI = baseURI.substr(0, slashIndex + 1);\n}\nelse if (typeof process !== 'undefined' && process.cwd) {\n  baseURI = 'file://' + (isWindows ? '/' : '') + process.cwd();\n  if (isWindows)\n    baseURI = baseURI.replace(/\\\\/g, '/');\n}\nelse {\n  throw new TypeError('No environment baseURI');\n}\n\n// ensure baseURI has trailing \"/\"\nif (baseURI[baseURI.length - 1] !== '/')\n  baseURI += '/';\n\n/*\n * LoaderError with chaining for loader stacks\n */\nvar errArgs = new Error(0, '_').fileName == '_';\nfunction LoaderError__Check_error_message_for_loader_stack (childErr, newMessage) {\n  // Convert file:/// URLs to paths in Node\n  if (!isBrowser)\n    newMessage = newMessage.replace(isWindows ? /file:\\/\\/\\//g : /file:\\/\\//g, '');\n\n  var message = (childErr.message || childErr) + '\\n  ' + newMessage;\n\n  var err;\n  if (errArgs && childErr.fileName)\n    err = new Error(message, childErr.fileName, childErr.lineNumber);\n  else\n    err = new Error(message);\n\n\n  var stack = childErr.originalErr ? childErr.originalErr.stack : childErr.stack;\n\n  if (isNode)\n    // node doesn't show the message otherwise\n    err.stack = message + '\\n  ' + stack;\n  else\n    err.stack = stack;\n\n  err.originalErr = childErr.originalErr || childErr;\n\n  return err;\n}\n\n/*\n * Optimized URL normalization assuming a syntax-valid URL parent\n */\nfunction throwResolveError (relUrl, parentUrl) {\n  throw new RangeError('Unable to resolve \"' + relUrl + '\" to ' + parentUrl);\n}\nfunction resolveIfNotPlain (relUrl, parentUrl) {\n  relUrl = relUrl.trim();\n  var parentProtocol = parentUrl && parentUrl.substr(0, parentUrl.indexOf(':') + 1);\n\n  var firstChar = relUrl[0];\n  var secondChar = relUrl[1];\n\n  // protocol-relative\n  if (firstChar === '/' && secondChar === '/') {\n    if (!parentProtocol)\n      throwResolveError(relUrl, parentUrl);\n    return parentProtocol + relUrl;\n  }\n  // relative-url\n  else if (firstChar === '.' && (secondChar === '/' || secondChar === '.' && (relUrl[2] === '/' || relUrl.length === 2) || relUrl.length === 1)\n      || firstChar === '/') {\n    var parentIsPlain = !parentProtocol || parentUrl[parentProtocol.length] !== '/';\n\n    // read pathname from parent if a URL\n    // pathname taken to be part after leading \"/\"\n    var pathname;\n    if (parentIsPlain) {\n      // resolving to a plain parent -> skip standard URL prefix, and treat entire parent as pathname\n      if (parentUrl === undefined)\n        throwResolveError(relUrl, parentUrl);\n      pathname = parentUrl;\n    }\n    else if (parentUrl[parentProtocol.length + 1] === '/') {\n      // resolving to a :// so we need to read out the auth and host\n      if (parentProtocol !== 'file:') {\n        pathname = parentUrl.substr(parentProtocol.length + 2);\n        pathname = pathname.substr(pathname.indexOf('/') + 1);\n      }\n      else {\n        pathname = parentUrl.substr(8);\n      }\n    }\n    else {\n      // resolving to :/ so pathname is the /... part\n      pathname = parentUrl.substr(parentProtocol.length + 1);\n    }\n\n    if (firstChar === '/') {\n      if (parentIsPlain)\n        throwResolveError(relUrl, parentUrl);\n      else\n        return parentUrl.substr(0, parentUrl.length - pathname.length - 1) + relUrl;\n    }\n\n    // join together and split for removal of .. and . segments\n    // looping the string instead of anything fancy for perf reasons\n    // '../../../../../z' resolved to 'x/y' is just 'z' regardless of parentIsPlain\n    var segmented = pathname.substr(0, pathname.lastIndexOf('/') + 1) + relUrl;\n\n    var output = [];\n    var segmentIndex = undefined;\n\n    for (var i = 0; i < segmented.length; i++) {\n      // busy reading a segment - only terminate on '/'\n      if (segmentIndex !== undefined) {\n        if (segmented[i] === '/') {\n          output.push(segmented.substr(segmentIndex, i - segmentIndex + 1));\n          segmentIndex = undefined;\n        }\n        continue;\n      }\n\n      // new segment - check if it is relative\n      if (segmented[i] === '.') {\n        // ../ segment\n        if (segmented[i + 1] === '.' && (segmented[i + 2] === '/' || i === segmented.length - 2)) {\n          output.pop();\n          i += 2;\n        }\n        // ./ segment\n        else if (segmented[i + 1] === '/' || i === segmented.length - 1) {\n          i += 1;\n        }\n        else {\n          // the start of a new segment as below\n          segmentIndex = i;\n          continue;\n        }\n\n        // this is the plain URI backtracking error (../, package:x -> error)\n        if (parentIsPlain && output.length === 0)\n          throwResolveError(relUrl, parentUrl);\n\n        // trailing . or .. segment\n        if (i === segmented.length)\n          output.push('');\n        continue;\n      }\n\n      // it is the start of a new segment\n      segmentIndex = i;\n    }\n    // finish reading out the last segment\n    if (segmentIndex !== undefined)\n      output.push(segmented.substr(segmentIndex, segmented.length - segmentIndex));\n\n    return parentUrl.substr(0, parentUrl.length - pathname.length) + output.join('');\n  }\n\n  // sanitizes and verifies (by returning undefined if not a valid URL-like form)\n  // Windows filepath compatibility is an added convenience here\n  var protocolIndex = relUrl.indexOf(':');\n  if (protocolIndex !== -1) {\n    if (isNode) {\n      // C:\\x becomes file:///c:/x (we don't support C|\\x)\n      if (relUrl[1] === ':' && relUrl[2] === '\\\\' && relUrl[0].match(/[a-z]/i))\n        return 'file:///' + relUrl.replace(/\\\\/g, '/');\n    }\n    return relUrl;\n  }\n}\n\nvar resolvedPromise$1 = Promise.resolve();\n\n/*\n * Simple Array values shim\n */\nfunction arrayValues (arr) {\n  if (arr.values)\n    return arr.values();\n\n  if (typeof Symbol === 'undefined' || !Symbol.iterator)\n    throw new Error('Symbol.iterator not supported in this browser');\n\n  var iterable = {};\n  iterable[Symbol.iterator] = function () {\n    var keys = Object.keys(arr);\n    var keyIndex = 0;\n    return {\n      next: function () {\n        if (keyIndex < keys.length)\n          return {\n            value: arr[keys[keyIndex++]],\n            done: false\n          };\n        else\n          return {\n            value: undefined,\n            done: true\n          };\n      }\n    };\n  };\n  return iterable;\n}\n\n/*\n * 3. Reflect.Loader\n *\n * We skip the entire native internal pipeline, just providing the bare API\n */\n// 3.1.1\nfunction Loader () {\n  this.registry = new Registry();\n}\n// 3.3.1\nLoader.prototype.constructor = Loader;\n\nfunction ensureInstantiated (module) {\n  if (!(module instanceof ModuleNamespace))\n    throw new TypeError('Module instantiation did not return a valid namespace object.');\n  return module;\n}\n\n// 3.3.2\nLoader.prototype.import = function (key, parent) {\n  if (typeof key !== 'string')\n    throw new TypeError('Loader import method must be passed a module key string');\n  // custom resolveInstantiate combined hook for better perf\n  var loader = this;\n  return resolvedPromise$1\n  .then(function () {\n    return loader[RESOLVE_INSTANTIATE](key, parent);\n  })\n  .then(ensureInstantiated)\n  //.then(Module.evaluate)\n  .catch(function (err) {\n    throw LoaderError__Check_error_message_for_loader_stack(err, 'Loading ' + key + (parent ? ' from ' + parent : ''));\n  });\n};\n// 3.3.3\nvar RESOLVE = Loader.resolve = createSymbol('resolve');\n\n/*\n * Combined resolve / instantiate hook\n *\n * Not in current reduced spec, but necessary to separate RESOLVE from RESOLVE + INSTANTIATE as described\n * in the spec notes of this repo to ensure that loader.resolve doesn't instantiate when not wanted.\n *\n * We implement RESOLVE_INSTANTIATE as a single hook instead of a separate INSTANTIATE in order to avoid\n * the need for double registry lookups as a performance optimization.\n */\nvar RESOLVE_INSTANTIATE = Loader.resolveInstantiate = createSymbol('resolveInstantiate');\n\n// default resolveInstantiate is just to call resolve and then get from the registry\n// this provides compatibility for the resolveInstantiate optimization\nLoader.prototype[RESOLVE_INSTANTIATE] = function (key, parent) {\n  var loader = this;\n  return loader.resolve(key, parent)\n  .then(function (resolved) {\n    return loader.registry.get(resolved);\n  });\n};\n\nfunction ensureResolution (resolvedKey) {\n  if (resolvedKey === undefined)\n    throw new RangeError('No resolution found.');\n  return resolvedKey;\n}\n\nLoader.prototype.resolve = function (key, parent) {\n  var loader = this;\n  return resolvedPromise$1\n  .then(function() {\n    return loader[RESOLVE](key, parent);\n  })\n  .then(ensureResolution)\n  .catch(function (err) {\n    throw LoaderError__Check_error_message_for_loader_stack(err, 'Resolving ' + key + (parent ? ' to ' + parent : ''));\n  });\n};\n\n// 3.3.4 (import without evaluate)\n// this is not documented because the use of deferred evaluation as in Module.evaluate is not\n// documented, as it is not considered a stable feature to be encouraged\n// Loader.prototype.load may well be deprecated if this stays disabled\n/* Loader.prototype.load = function (key, parent) {\n  return Promise.resolve(this[RESOLVE_INSTANTIATE](key, parent || this.key))\n  .catch(function (err) {\n    throw addToError(err, 'Loading ' + key + (parent ? ' from ' + parent : ''));\n  });\n}; */\n\n/*\n * 4. Registry\n *\n * Instead of structuring through a Map, just use a dictionary object\n * We throw for construction attempts so this doesn't affect the public API\n *\n * Registry has been adjusted to use Namespace objects over ModuleStatus objects\n * as part of simplifying loader API implementation\n */\nvar iteratorSupport = typeof Symbol !== 'undefined' && Symbol.iterator;\nvar REGISTRY = createSymbol('registry');\nfunction Registry() {\n  this[REGISTRY] = {};\n  this._registry = REGISTRY;\n}\n// 4.4.1\nif (iteratorSupport) {\n  // 4.4.2\n  Registry.prototype[Symbol.iterator] = function () {\n    return this.entries()[Symbol.iterator]();\n  };\n\n  // 4.4.3\n  Registry.prototype.entries = function () {\n    var registry = this[REGISTRY];\n    return arrayValues(Object.keys(registry).map(function (key) {\n      return [key, registry[key]];\n    }));\n  };\n}\n\n// 4.4.4\nRegistry.prototype.keys = function () {\n  return arrayValues(Object.keys(this[REGISTRY]));\n};\n// 4.4.5\nRegistry.prototype.values = function () {\n  var registry = this[REGISTRY];\n  return arrayValues(Object.keys(registry).map(function (key) {\n    return registry[key];\n  }));\n};\n// 4.4.6\nRegistry.prototype.get = function (key) {\n  return this[REGISTRY][key];\n};\n// 4.4.7\nRegistry.prototype.set = function (key, namespace) {\n  if (!(namespace instanceof ModuleNamespace))\n    throw new Error('Registry must be set with an instance of Module Namespace');\n  this[REGISTRY][key] = namespace;\n  return this;\n};\n// 4.4.8\nRegistry.prototype.has = function (key) {\n  return Object.hasOwnProperty.call(this[REGISTRY], key);\n};\n// 4.4.9\nRegistry.prototype.delete = function (key) {\n  if (Object.hasOwnProperty.call(this[REGISTRY], key)) {\n    delete this[REGISTRY][key];\n    return true;\n  }\n  return false;\n};\n\n/*\n * Simple ModuleNamespace Exotic object based on a baseObject\n * We export this for allowing a fast-path for module namespace creation over Module descriptors\n */\n// var EVALUATE = createSymbol('evaluate');\nvar BASE_OBJECT = createSymbol('baseObject');\n\n// 8.3.1 Reflect.Module\n/*\n * Best-effort simplified non-spec implementation based on\n * a baseObject referenced via getters.\n *\n * Allows:\n *\n *   loader.registry.set('x', new Module({ default: 'x' }));\n *\n * Optional evaluation function provides experimental Module.evaluate\n * support for non-executed modules in registry.\n */\nfunction ModuleNamespace (baseObject/*, evaluate*/) {\n  Object.defineProperty(this, BASE_OBJECT, {\n    value: baseObject\n  });\n\n  // evaluate defers namespace population\n  /* if (evaluate) {\n    Object.defineProperty(this, EVALUATE, {\n      value: evaluate,\n      configurable: true,\n      writable: true\n    });\n  }\n  else { */\n    Object.keys(baseObject).forEach(extendNamespace, this);\n  //}\n}\n// 8.4.2\nModuleNamespace.prototype = Object.create(null);\n\nif (typeof Symbol !== 'undefined' && Symbol.toStringTag)\n  Object.defineProperty(ModuleNamespace.prototype, Symbol.toStringTag, {\n    value: 'Module'\n  });\n\nfunction extendNamespace (key) {\n  Object.defineProperty(this, key, {\n    enumerable: true,\n    get: function () {\n      return this[BASE_OBJECT][key];\n    }\n  });\n}\n\n/* function doEvaluate (evaluate, context) {\n  try {\n    evaluate.call(context);\n  }\n  catch (e) {\n    return e;\n  }\n}\n\n// 8.4.1 Module.evaluate... not documented or used because this is potentially unstable\nModule.evaluate = function (ns) {\n  var evaluate = ns[EVALUATE];\n  if (evaluate) {\n    ns[EVALUATE] = undefined;\n    var err = doEvaluate(evaluate);\n    if (err) {\n      // cache the error\n      ns[EVALUATE] = function () {\n        throw err;\n      };\n      throw err;\n    }\n    Object.keys(ns[BASE_OBJECT]).forEach(extendNamespace, ns);\n  }\n  // make chainable\n  return ns;\n}; */\n\n/*\n * Register Loader\n *\n * Builds directly on top of loader polyfill to provide:\n * - loader.register support\n * - hookable higher-level resolve\n * - instantiate hook returning a ModuleNamespace or undefined for es module loading\n * - loader error behaviour as in HTML and loader specs, clearing failed modules from registration cache synchronously\n * - build tracing support by providing a .trace=true and .loads object format\n */\n\nvar REGISTER_INTERNAL = createSymbol('register-internal');\n\nfunction RegisterLoader$1 () {\n  Loader.call(this);\n\n  var registryDelete = this.registry.delete;\n  this.registry.delete = function (key) {\n    var deleted = registryDelete.call(this, key);\n\n    // also delete from register registry if linked\n    if (records.hasOwnProperty(key) && !records[key].linkRecord)\n      delete records[key];\n\n    return deleted;\n  };\n\n  var records = {};\n\n  this[REGISTER_INTERNAL] = {\n    // last anonymous System.register call\n    lastRegister: undefined,\n    // in-flight es module load records\n    records: records\n  };\n\n  // tracing\n  this.trace = false;\n}\n\nRegisterLoader$1.prototype = Object.create(Loader.prototype);\nRegisterLoader$1.prototype.constructor = RegisterLoader$1;\n\nvar INSTANTIATE = RegisterLoader$1.instantiate = createSymbol('instantiate');\n\n// default normalize is the WhatWG style normalizer\nRegisterLoader$1.prototype[RegisterLoader$1.resolve = Loader.resolve] = function (key, parentKey) {\n  return resolveIfNotPlain(key, parentKey || baseURI);\n};\n\nRegisterLoader$1.prototype[INSTANTIATE] = function (key, processAnonRegister) {};\n\n// once evaluated, the linkRecord is set to undefined leaving just the other load record properties\n// this allows tracking new binding listeners for es modules through importerSetters\n// for dynamic modules, the load record is removed entirely.\nfunction createLoadRecord (state, key, registration) {\n  return state.records[key] = {\n    key: key,\n\n    // defined System.register cache\n    registration: registration,\n\n    // module namespace object\n    module: undefined,\n\n    // es-only\n    // this sticks around so new module loads can listen to binding changes\n    // for already-loaded modules by adding themselves to their importerSetters\n    importerSetters: undefined,\n\n    // in-flight linking record\n    linkRecord: {\n      // promise for instantiated\n      instantiatePromise: undefined,\n      dependencies: undefined,\n      execute: undefined,\n      executingRequire: false,\n\n      // underlying module object bindings\n      moduleObj: undefined,\n\n      // es only, also indicates if es or not\n      setters: undefined,\n\n      // promise for instantiated dependencies (dependencyInstantiations populated)\n      depsInstantiatePromise: undefined,\n      // will be the array of dependency load record or a module namespace\n      dependencyInstantiations: undefined,\n\n      // indicates if the load and all its dependencies are instantiated and linked\n      // but not yet executed\n      // mostly just a performance shortpath to avoid rechecking the promises above\n      linked: false,\n\n      error: undefined\n      // NB optimization and way of ensuring module objects in setters\n      // indicates setters which should run pre-execution of that dependency\n      // setters is then just for completely executed module objects\n      // alternatively we just pass the partially filled module objects as\n      // arguments into the execute function\n      // hoisted: undefined\n    }\n  };\n}\n\nRegisterLoader$1.prototype[Loader.resolveInstantiate] = function (key, parentKey) {\n  var loader = this;\n  var state = this[REGISTER_INTERNAL];\n  var registry = loader.registry[loader.registry._registry];\n\n  return resolveInstantiate(loader, key, parentKey, registry, state)\n  .then(function (instantiated) {\n    if (instantiated instanceof ModuleNamespace)\n      return instantiated;\n\n    // if already beaten to linked, return\n    if (instantiated.module)\n      return instantiated.module;\n\n    // resolveInstantiate always returns a load record with a link record and no module value\n    if (instantiated.linkRecord.linked)\n      return ensureEvaluate(loader, instantiated, instantiated.linkRecord, registry, state, undefined);\n\n    return instantiateDeps(loader, instantiated, instantiated.linkRecord, registry, state, [instantiated])\n    .then(function () {\n      return ensureEvaluate(loader, instantiated, instantiated.linkRecord, registry, state, undefined);\n    })\n    .catch(function (err) {\n      clearLoadErrors(loader, instantiated);\n      throw err;\n    });\n  });\n};\n\nfunction resolveInstantiate (loader, key, parentKey, registry, state) {\n  // normalization shortpath for already-normalized key\n  // could add a plain name filter, but doesn't yet seem necessary for perf\n  var module = registry[key];\n  if (module)\n    return Promise.resolve(module);\n\n  var load = state.records[key];\n\n  // already linked but not in main registry is ignored\n  if (load && !load.module)\n    return instantiate(loader, load, load.linkRecord, registry, state);\n\n  return loader.resolve(key, parentKey)\n  .then(function (resolvedKey) {\n    // main loader registry always takes preference\n    module = registry[resolvedKey];\n    if (module)\n      return module;\n\n    load = state.records[resolvedKey];\n\n    // already has a module value but not already in the registry (load.module)\n    // means it was removed by registry.delete, so we should\n    // disgard the current load record creating a new one over it\n    // but keep any existing registration\n    if (!load || load.module)\n      load = createLoadRecord(state, resolvedKey, load && load.registration);\n\n    var link = load.linkRecord;\n    if (!link)\n      return load;\n\n    return instantiate(loader, load, link, registry, state);\n  });\n}\n\nfunction createProcessAnonRegister (loader, load, state) {\n  return function () {\n    var lastRegister = state.lastRegister;\n\n    if (!lastRegister)\n      return !!load.registration;\n\n    state.lastRegister = undefined;\n    load.registration = lastRegister;\n\n    return true;\n  };\n}\n\nfunction instantiate (loader, load, link, registry, state) {\n  return link.instantiatePromise || (link.instantiatePromise =\n  // if there is already an existing registration, skip running instantiate\n  (load.registration ? Promise.resolve() : Promise.resolve().then(function () {\n    state.lastRegister = undefined;\n    return loader[INSTANTIATE](load.key, loader[INSTANTIATE].length > 1 && createProcessAnonRegister(loader, load, state));\n  }))\n  .then(function (instantiation) {\n    // direct module return from instantiate -> we're done\n    if (instantiation !== undefined) {\n      if (!(instantiation instanceof ModuleNamespace))\n        throw new TypeError('Instantiate did not return a valid Module object.');\n\n      delete state.records[load.key];\n      if (loader.trace)\n        traceLoad(loader, load, link);\n      return registry[load.key] = instantiation;\n    }\n\n    // run the cached loader.register declaration if there is one\n    var registration = load.registration;\n    // clear to allow new registrations for future loads (combined with registry delete)\n    load.registration = undefined;\n    if (!registration)\n      throw new TypeError('Module instantiation did not call an anonymous or correctly named System.register.');\n\n    link.dependencies = registration[0];\n\n    load.importerSetters = [];\n\n    link.moduleObj = {};\n\n    // process System.registerDynamic declaration\n    if (registration[2]) {\n      link.moduleObj.default = {};\n      link.moduleObj.__useDefault = true;\n      link.executingRequire = registration[1];\n      link.execute = registration[2];\n    }\n\n    // process System.register declaration\n    else {\n      registerDeclarative(loader, load, link, registration[1]);\n    }\n\n    // shortpath to instantiateDeps\n    if (!link.dependencies.length) {\n      link.linked = true;\n      if (loader.trace)\n        traceLoad(loader, load, link);\n    }\n\n    return load;\n  })\n  .catch(function (err) {\n    throw link.error = LoaderError__Check_error_message_for_loader_stack(err, 'Instantiating ' + load.key);\n  }));\n}\n\n// like resolveInstantiate, but returning load records for linking\nfunction resolveInstantiateDep (loader, key, parentKey, registry, state, traceDepMap) {\n  // normalization shortpaths for already-normalized key\n  // DISABLED to prioritise consistent resolver calls\n  // could add a plain name filter, but doesn't yet seem necessary for perf\n  /* var load = state.records[key];\n  var module = registry[key];\n\n  if (module) {\n    if (traceDepMap)\n      traceDepMap[key] = key;\n\n    // registry authority check in case module was deleted or replaced in main registry\n    if (load && load.module && load.module === module)\n      return load;\n    else\n      return module;\n  }\n\n  // already linked but not in main registry is ignored\n  if (load && !load.module) {\n    if (traceDepMap)\n      traceDepMap[key] = key;\n    return instantiate(loader, load, load.linkRecord, registry, state);\n  } */\n  return loader.resolve(key, parentKey)\n  .then(function (resolvedKey) {\n    if (traceDepMap)\n      traceDepMap[key] = resolvedKey;\n\n    // normalization shortpaths for already-normalized key\n    var load = state.records[resolvedKey];\n    var module = registry[resolvedKey];\n\n    // main loader registry always takes preference\n    if (module && (!load || load.module && module !== load.module))\n      return module;\n\n    // already has a module value but not already in the registry (load.module)\n    // means it was removed by registry.delete, so we should\n    // disgard the current load record creating a new one over it\n    // but keep any existing registration\n    if (!load || !module && load.module)\n      load = createLoadRecord(state, resolvedKey, load && load.registration);\n\n    var link = load.linkRecord;\n    if (!link)\n      return load;\n\n    return instantiate(loader, load, link, registry, state);\n  });\n}\n\nfunction traceLoad (loader, load, link) {\n  loader.loads = loader.loads || {};\n  loader.loads[load.key] = {\n    key: load.key,\n    deps: link.dependencies,\n    dynamicDeps: [],\n    depMap: link.depMap || {}\n  };\n}\n\nfunction traceDynamicLoad (loader, parentKey, key) {\n  loader.loads[parentKey].dynamicDeps.push(key);\n}\n\n/*\n * Convert a CJS module.exports into a valid object for new Module:\n *\n *   new Module(getEsModule(module.exports))\n *\n * Sets the default value to the module, while also reading off named exports carefully.\n */\nfunction registerDeclarative (loader, load, link, declare) {\n  var moduleObj = link.moduleObj;\n  var importerSetters = load.importerSetters;\n\n  var definedExports = false;\n\n  // closure especially not based on link to allow link record disposal\n  var declared = declare.call(envGlobal, function (name, value) {\n    if (typeof name === 'object') {\n      var changed = false;\n      for (var p in name) {\n        value = name[p];\n        if (p !== '__useDefault' && (!(p in moduleObj) || moduleObj[p] !== value)) {\n          changed = true;\n          moduleObj[p] = value;\n        }\n      }\n      if (changed === false)\n        return value;\n    }\n    else {\n      if ((definedExports || name in moduleObj) && moduleObj[name] === value)\n        return value;\n      moduleObj[name] = value;\n    }\n\n    for (var i = 0; i < importerSetters.length; i++)\n      importerSetters[i](moduleObj);\n\n    return value;\n  }, new ContextualLoader(loader, load.key));\n\n  link.setters = declared.setters;\n  link.execute = declared.execute;\n  if (declared.exports) {\n    link.moduleObj = moduleObj = declared.exports;\n    definedExports = true;\n  }\n}\n\nfunction instantiateDeps (loader, load, link, registry, state, seen) {\n  return (link.depsInstantiatePromise || (link.depsInstantiatePromise = Promise.resolve()\n  .then(function () {\n    var depsInstantiatePromises = Array(link.dependencies.length);\n\n    for (var i = 0; i < link.dependencies.length; i++)\n      depsInstantiatePromises[i] = resolveInstantiateDep(loader, link.dependencies[i], load.key, registry, state, loader.trace && link.depMap || (link.depMap = {}));\n\n    return Promise.all(depsInstantiatePromises);\n  })\n  .then(function (dependencyInstantiations) {\n    link.dependencyInstantiations = dependencyInstantiations;\n\n    // run setters to set up bindings to instantiated dependencies\n    if (link.setters) {\n      for (var i = 0; i < dependencyInstantiations.length; i++) {\n        var setter = link.setters[i];\n        if (setter) {\n          var instantiation = dependencyInstantiations[i];\n\n          if (instantiation instanceof ModuleNamespace) {\n            setter(instantiation);\n          }\n          else {\n            setter(instantiation.module || instantiation.linkRecord.moduleObj);\n            // this applies to both es and dynamic registrations\n            if (instantiation.importerSetters)\n              instantiation.importerSetters.push(setter);\n          }\n        }\n      }\n    }\n  })))\n  .then(function () {\n    // now deeply instantiateDeps on each dependencyInstantiation that is a load record\n    var deepDepsInstantiatePromises = [];\n\n    for (var i = 0; i < link.dependencies.length; i++) {\n      var depLoad = link.dependencyInstantiations[i];\n      var depLink = depLoad.linkRecord;\n\n      if (!depLink || depLink.linked)\n        continue;\n\n      if (seen.indexOf(depLoad) !== -1) {\n        deepDepsInstantiatePromises.push(depLink.depsInstantiatePromise);\n        continue;\n      }\n      seen.push(depLoad);\n\n      deepDepsInstantiatePromises.push(instantiateDeps(loader, depLoad, depLoad.linkRecord, registry, state, seen));\n    }\n\n    return Promise.all(deepDepsInstantiatePromises);\n  })\n  .then(function () {\n    // as soon as all dependencies instantiated, we are ready for evaluation so can add to the registry\n    // this can run multiple times, but so what\n    link.linked = true;\n    if (loader.trace)\n      traceLoad(loader, load, link);\n\n    return load;\n  })\n  .catch(function (err) {\n    err = LoaderError__Check_error_message_for_loader_stack(err, 'Loading ' + load.key);\n\n    // throw up the instantiateDeps stack\n    // loads are then synchonously cleared at the top-level through the clearLoadErrors helper below\n    // this then ensures avoiding partially unloaded tree states\n    link.error = link.error || err;\n\n    throw err;\n  });\n}\n\n// clears an errored load and all its errored dependencies from the loads registry\nfunction clearLoadErrors (loader, load) {\n  var state = loader[REGISTER_INTERNAL];\n\n  // clear from loads\n  if (state.records[load.key] === load)\n    delete state.records[load.key];\n\n  var link = load.linkRecord;\n\n  if (!link)\n    return;\n\n  if (link.dependencyInstantiations)\n    link.dependencyInstantiations.forEach(function (depLoad, index) {\n      if (!depLoad || depLoad instanceof ModuleNamespace)\n        return;\n\n      if (depLoad.linkRecord) {\n        if (depLoad.linkRecord.error) {\n          // provides a circular reference check\n          if (state.records[depLoad.key] === depLoad)\n            clearLoadErrors(loader, depLoad);\n        }\n\n        // unregister setters for es dependency load records that will remain\n        if (link.setters && depLoad.importerSetters) {\n          var setterIndex = depLoad.importerSetters.indexOf(link.setters[index]);\n          depLoad.importerSetters.splice(setterIndex, 1);\n        }\n      }\n    });\n}\n\n/*\n * System.register\n */\nRegisterLoader$1.prototype.register = function (key, deps, declare) {\n  var state = this[REGISTER_INTERNAL];\n\n  // anonymous modules get stored as lastAnon\n  if (declare === undefined) {\n    state.lastRegister = [key, deps, undefined];\n  }\n\n  // everything else registers into the register cache\n  else {\n    var load = state.records[key] || createLoadRecord(state, key, undefined);\n    load.registration = [deps, declare, undefined];\n  }\n};\n\n/*\n * System.registerDyanmic\n */\nRegisterLoader$1.prototype.registerDynamic = function (key, deps, executingRequire, execute) {\n  var state = this[REGISTER_INTERNAL];\n\n  // anonymous modules get stored as lastAnon\n  if (typeof key !== 'string') {\n    state.lastRegister = [key, deps, executingRequire];\n  }\n\n  // everything else registers into the register cache\n  else {\n    var load = state.records[key] || createLoadRecord(state, key, undefined);\n    load.registration = [deps, executingRequire, execute];\n  }\n};\n\n// ContextualLoader class\n// backwards-compatible with previous System.register context argument by exposing .id\nfunction ContextualLoader (loader, key) {\n  this.loader = loader;\n  this.key = this.id = key;\n}\n/*ContextualLoader.prototype.constructor = function () {\n  throw new TypeError('Cannot subclass the contextual loader only Reflect.Loader.');\n};*/\nContextualLoader.prototype.import = function (key) {\n  if (this.loader.trace)\n    traceDynamicLoad(this.loader, this.key, key);\n  return this.loader.import(key, this.key);\n};\n/*ContextualLoader.prototype.resolve = function (key) {\n  return this.loader.resolve(key, this.key);\n};*/\n\n// this is the execution function bound to the Module namespace record\nfunction ensureEvaluate (loader, load, link, registry, state, seen) {\n  if (load.module)\n    return load.module;\n\n  if (link.error)\n    throw link.error;\n\n  if (seen && seen.indexOf(load) !== -1)\n    return load.linkRecord.moduleObj;\n\n  // for ES loads we always run ensureEvaluate on top-level, so empty seen is passed regardless\n  // for dynamic loads, we pass seen if also dynamic\n  var err = doEvaluate(loader, load, link, registry, state, link.setters ? [] : seen || []);\n  if (err) {\n    clearLoadErrors(loader, load);\n    throw err;\n  }\n\n  return load.module;\n}\n\nfunction makeDynamicRequire (loader, key, dependencies, dependencyInstantiations, registry, state, seen) {\n  // we can only require from already-known dependencies\n  return function (name) {\n    for (var i = 0; i < dependencies.length; i++) {\n      if (dependencies[i] === name) {\n        var depLoad = dependencyInstantiations[i];\n        var module;\n\n        if (depLoad instanceof ModuleNamespace)\n          module = depLoad;\n        else\n          module = ensureEvaluate(loader, depLoad, depLoad.linkRecord, registry, state, seen);\n\n        return module.__useDefault ? module.default : module;\n      }\n    }\n    throw new Error('Module ' + name + ' not declared as a System.registerDynamic dependency of ' + key);\n  };\n}\n\n// ensures the given es load is evaluated\n// returns the error if any\nfunction doEvaluate (loader, load, link, registry, state, seen) {\n  seen.push(load);\n\n  var err;\n\n  // es modules evaluate dependencies first\n  // non es modules explicitly call moduleEvaluate through require\n  if (link.setters) {\n    var depLoad, depLink;\n    for (var i = 0; i < link.dependencies.length; i++) {\n      depLoad = link.dependencyInstantiations[i];\n\n      if (depLoad instanceof ModuleNamespace)\n        continue;\n\n      // custom Module returned from instantiate\n      depLink = depLoad.linkRecord;\n      if (depLink && seen.indexOf(depLoad) === -1) {\n        if (depLink.error)\n          err = depLink.error;\n        else\n          // dynamic / declarative boundaries clear the \"seen\" list\n          // we just let cross format circular throw as would happen in real implementations\n          err = doEvaluate(loader, depLoad, depLink, registry, state, depLink.setters ? seen : []);\n      }\n\n      if (err)\n        return link.error = LoaderError__Check_error_message_for_loader_stack(err, 'Evaluating ' + load.key);\n    }\n  }\n\n  // link.execute won't exist for Module returns from instantiate on top-level load\n  if (link.execute) {\n    // ES System.register execute\n    // \"this\" is null in ES\n    if (link.setters) {\n      err = declarativeExecute(link.execute);\n    }\n    // System.registerDynamic execute\n    // \"this\" is \"exports\" in CJS\n    else {\n      var module = { id: load.key };\n      var moduleObj = link.moduleObj;\n      Object.defineProperty(module, 'exports', {\n        configurable: true,\n        set: function (exports) {\n          moduleObj.default = exports;\n        },\n        get: function () {\n          return moduleObj.default;\n        }\n      });\n\n      var require = makeDynamicRequire(loader, load.key, link.dependencies, link.dependencyInstantiations, registry, state, seen);\n\n      // evaluate deps first\n      if (!link.executingRequire)\n        for (var i = 0; i < link.dependencies.length; i++)\n          require(link.dependencies[i]);\n\n      err = dynamicExecute(link.execute, require, moduleObj.default, module);\n\n      // pick up defineProperty calls to module.exports when we can\n      if (module.exports !== moduleObj.default)\n        moduleObj.default = module.exports;\n\n      var moduleDefault = moduleObj.default;\n\n      // __esModule flag extension support via lifting\n      if (moduleDefault && moduleDefault.__esModule) {\n        for (var p in moduleObj.default) {\n          if (Object.hasOwnProperty.call(moduleObj.default, p) && p !== 'default')\n            moduleObj[p] = moduleDefault[p];\n        }\n      }\n    }\n  }\n\n  if (err)\n    return link.error = LoaderError__Check_error_message_for_loader_stack(err, 'Evaluating ' + load.key);\n\n  registry[load.key] = load.module = new ModuleNamespace(link.moduleObj);\n\n  // if not an esm module, run importer setters and clear them\n  // this allows dynamic modules to update themselves into es modules\n  // as soon as execution has completed\n  if (!link.setters) {\n    if (load.importerSetters)\n      for (var i = 0; i < load.importerSetters.length; i++)\n        load.importerSetters[i](load.module);\n    load.importerSetters = undefined;\n  }\n\n  // dispose link record\n  load.linkRecord = undefined;\n}\n\n// {} is the closest we can get to call(undefined)\nvar nullContext = {};\nif (Object.freeze)\n  Object.freeze(nullContext);\n\nfunction declarativeExecute (execute) {\n  try {\n    execute.call(nullContext);\n  }\n  catch (e) {\n    return e;\n  }\n}\n\nfunction dynamicExecute (execute, require, exports, module) {\n  try {\n    var output = execute.call(envGlobal, require, exports, module);\n    if (output !== undefined)\n      module.exports = output;\n  }\n  catch (e) {\n    return e;\n  }\n}\n\nvar resolvedPromise = Promise.resolve();\nfunction noop () {}\n\nvar emptyModule = new ModuleNamespace({});\n\nfunction protectedCreateNamespace (bindings) {\n  if (bindings instanceof ModuleNamespace)\n    return bindings;\n\n  if (bindings && bindings.__esModule)\n    return new ModuleNamespace(bindings);\n\n  return new ModuleNamespace({ default: bindings, __useDefault: true });\n}\n\nvar hasStringTag;\nfunction isModule (m) {\n  if (hasStringTag === undefined)\n    hasStringTag = typeof Symbol !== 'undefined' && !!Symbol.toStringTag;\n  return m instanceof ModuleNamespace || hasStringTag && Object.prototype.toString.call(m) == '[object Module]';\n}\n\nvar CONFIG = createSymbol('loader-config');\nvar METADATA = createSymbol('metadata');\n\n\n\nvar isWorker = typeof window === 'undefined' && typeof self !== 'undefined' && typeof importScripts !== 'undefined';\n\nfunction warn (msg, force) {\n  if (force || this.warnings && typeof console !== 'undefined' && console.warn)\n    console.warn(msg);\n}\n\nfunction checkInstantiateWasm (loader, wasmBuffer, processAnonRegister) {\n  var bytes = new Uint8Array(wasmBuffer);\n\n  // detect by leading bytes\n  // Can be (new Uint32Array(fetched))[0] === 0x6D736100 when working in Node\n  if (bytes[0] === 0 && bytes[1] === 97 && bytes[2] === 115) {\n    return WebAssembly.compile(wasmBuffer).then(function (m) {\n      var deps = [];\n      var setters = [];\n      var importObj = {};\n\n      // we can only set imports if supported (eg Safari doesnt support)\n      if (WebAssembly.Module.imports)\n        WebAssembly.Module.imports(m).forEach(function (i) {\n          var key = i.module;\n          setters.push(function (m) {\n            importObj[key] = m;\n          });\n          if (deps.indexOf(key) === -1)\n            deps.push(key);\n        });\n      loader.register(deps, function (_export) {\n        return {\n          setters: setters,\n          execute: function () {\n            _export(new WebAssembly.Instance(m, importObj).exports);\n          }\n        };\n      });\n      processAnonRegister();\n\n      return true;\n    });\n  }\n\n  return Promise.resolve(false);\n}\n\nvar parentModuleContext;\nfunction loadNodeModule (key, baseURL) {\n  if (key[0] === '.')\n    throw new Error('Node module ' + key + ' can\\'t be loaded as it is not a package require.');\n\n  if (!parentModuleContext) {\n    var Module = this._nodeRequire('module');\n    var base = baseURL.substr(isWindows ? 8 : 7);\n    parentModuleContext = new Module(base);\n    parentModuleContext.paths = Module._nodeModulePaths(base);\n  }\n  return parentModuleContext.require(key);\n}\n\nfunction extend (a, b) {\n  for (var p in b) {\n    if (!Object.hasOwnProperty.call(b, p))\n      continue;\n    a[p] = b[p];\n  }\n  return a;\n}\n\nfunction prepend (a, b) {\n  for (var p in b) {\n    if (!Object.hasOwnProperty.call(b, p))\n      continue;\n    if (a[p] === undefined)\n      a[p] = b[p];\n  }\n  return a;\n}\n\n// meta first-level extends where:\n// array + array appends\n// object + object extends\n// other properties replace\nfunction extendMeta (a, b, _prepend) {\n  for (var p in b) {\n    if (!Object.hasOwnProperty.call(b, p))\n      continue;\n    var val = b[p];\n    if (a[p] === undefined)\n      a[p] = val;\n    else if (val instanceof Array && a[p] instanceof Array)\n      a[p] = [].concat(_prepend ? val : a[p]).concat(_prepend ? a[p] : val);\n    else if (typeof val == 'object' && val !== null && typeof a[p] == 'object')\n      a[p] = (_prepend ? prepend : extend)(extend({}, a[p]), val);\n    else if (!_prepend)\n      a[p] = val;\n  }\n}\n\nvar supportsPreload = false;\nvar supportsPrefetch = false;\nif (isBrowser)\n  (function () {\n    var relList = document.createElement('link').relList;\n    if (relList && relList.supports) {\n      supportsPrefetch = true;\n      try {\n        supportsPreload = relList.supports('preload');\n      }\n      catch (e) {}\n    }\n  })();\n\nfunction preloadScript (url) {\n  // fallback to old fashioned image technique which still works in safari\n  if (!supportsPreload && !supportsPrefetch) {\n    var preloadImage = new Image();\n    preloadImage.src = url;\n    return;\n  }\n\n  var link = document.createElement('link');\n  if (supportsPreload) {\n    link.rel = 'preload';\n    link.as = 'script';\n  }\n  else {\n    // this works for all except Safari (detected by relList.supports lacking)\n    link.rel = 'prefetch';\n  }\n  link.href = url;\n  document.head.appendChild(link);\n  document.head.removeChild(link);\n}\n\nfunction workerImport (src, resolve, reject) {\n  try {\n    importScripts(src);\n  }\n  catch (e) {\n    reject(e);\n  }\n  resolve();\n}\n\nif (isBrowser) {\n  var loadingScripts = [];\n  var onerror = window.onerror;\n  window.onerror = function globalOnerror (msg, src) {\n    for (var i = 0; i < loadingScripts.length; i++) {\n      if (loadingScripts[i].src !== src)\n        continue;\n      loadingScripts[i].err(msg);\n      return;\n    }\n    if (onerror)\n      onerror.apply(this, arguments);\n  };\n}\n\nfunction scriptLoad (src, crossOrigin, integrity, resolve, reject) {\n  // percent encode just \"#\" for HTTP requests\n  src = src.replace(/#/g, '%23');\n\n  // subresource integrity is not supported in web workers\n  if (isWorker)\n    return workerImport(src, resolve, reject);\n\n  var script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.charset = 'utf-8';\n  script.async = true;\n\n  if (crossOrigin)\n    script.crossOrigin = crossOrigin;\n  if (integrity)\n    script.integrity = integrity;\n\n  script.addEventListener('load', load, false);\n  script.addEventListener('error', error, false);\n\n  script.src = src;\n  document.head.appendChild(script);\n\n  function load () {\n    resolve();\n    cleanup();\n  }\n\n  // note this does not catch execution errors\n  function error (err) {\n    cleanup();\n    reject(new Error('Fetching ' + src));\n  }\n\n  function cleanup () {\n    for (var i = 0; i < loadingScripts.length; i++) {\n      if (loadingScripts[i].err === error) {\n        loadingScripts.splice(i, 1);\n        break;\n      }\n    }\n    script.removeEventListener('load', load, false);\n    script.removeEventListener('error', error, false);\n    document.head.removeChild(script);\n  }\n}\n\nfunction readMemberExpression (p, value) {\n  var pParts = p.split('.');\n  while (pParts.length)\n    value = value[pParts.shift()];\n  return value;\n}\n\n// separate out paths cache as a baseURL lock process\nfunction applyPaths (baseURL, paths, key) {\n  var mapMatch = getMapMatch(paths, key);\n  if (mapMatch) {\n    var target = paths[mapMatch] + key.substr(mapMatch.length);\n\n    var resolved = resolveIfNotPlain(target, baseURI);\n    if (resolved !== undefined)\n      return resolved;\n\n    return baseURL + target;\n  }\n  else if (key.indexOf(':') !== -1) {\n    return key;\n  }\n  else {\n    return baseURL + key;\n  }\n}\n\nfunction checkMap (p) {\n  var name = this.name;\n  // can add ':' here if we want paths to match the behaviour of map\n  if (name.substr(0, p.length) === p && (name.length === p.length || name[p.length] === '/' || p[p.length - 1] === '/' || p[p.length - 1] === ':')) {\n    var curLen = p.split('/').length;\n    if (curLen > this.len) {\n      this.match = p;\n      this.len = curLen;\n    }\n  }\n}\n\nfunction getMapMatch (map, name) {\n  if (Object.hasOwnProperty.call(map, name))\n    return name;\n\n  var bestMatch = {\n    name: name,\n    match: undefined,\n    len: 0\n  };\n\n  Object.keys(map).forEach(checkMap, bestMatch);\n\n  return bestMatch.match;\n}\n\n// RegEx adjusted from https://github.com/jbrantly/yabble/blob/master/lib/yabble.js#L339\nvar cjsRequireRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.\"'])require\\s*\\(\\s*(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')\\s*\\)/g;\n\n/*\n * Source loading\n */\nfunction fetchFetch (url, authorization, integrity, asBuffer) {\n  // fetch doesn't support file:/// urls\n  if (url.substr(0, 8) === 'file:///') {\n    if (hasXhr)\n      return xhrFetch(url, authorization, integrity, asBuffer);\n    else\n      throw new Error('Unable to fetch file URLs in this environment.');\n  }\n\n  // percent encode just \"#\" for HTTP requests\n  url = url.replace(/#/g, '%23');\n\n  var opts = {\n    // NB deprecate\n    headers: { Accept: 'application/x-es-module, */*' }\n  };\n\n  if (integrity)\n    opts.integrity = integrity;\n\n  if (authorization) {\n    if (typeof authorization == 'string')\n      opts.headers['Authorization'] = authorization;\n    opts.credentials = 'include';\n  }\n\n  return fetch(url, opts)\n  .then(function(res) {\n    if (res.ok)\n      return asBuffer ? res.arrayBuffer() : res.text();\n    else\n      throw new Error('Fetch error: ' + res.status + ' ' + res.statusText);\n  });\n}\n\nfunction xhrFetch (url, authorization, integrity, asBuffer) {\n  return new Promise(function (resolve, reject) {\n    // percent encode just \"#\" for HTTP requests\n    url = url.replace(/#/g, '%23');\n\n    var xhr = new XMLHttpRequest();\n    if (asBuffer)\n      xhr.responseType = 'arraybuffer';\n    function load() {\n      resolve(asBuffer ? xhr.response : xhr.responseText);\n    }\n    function error() {\n      reject(new Error('XHR error: ' + (xhr.status ? ' (' + xhr.status + (xhr.statusText ? ' ' + xhr.statusText  : '') + ')' : '') + ' loading ' + url));\n    }\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        // in Chrome on file:/// URLs, status is 0\n        if (xhr.status == 0) {\n          if (xhr.response) {\n            load();\n          }\n          else {\n            // when responseText is empty, wait for load or error event\n            // to inform if it is a 404 or empty file\n            xhr.addEventListener('error', error);\n            xhr.addEventListener('load', load);\n          }\n        }\n        else if (xhr.status === 200) {\n          load();\n        }\n        else {\n          error();\n        }\n      }\n    };\n    xhr.open(\"GET\", url, true);\n\n    if (xhr.setRequestHeader) {\n      xhr.setRequestHeader('Accept', 'application/x-es-module, */*');\n      // can set \"authorization: true\" to enable withCredentials only\n      if (authorization) {\n        if (typeof authorization == 'string')\n          xhr.setRequestHeader('Authorization', authorization);\n        xhr.withCredentials = true;\n      }\n    }\n\n    xhr.send(null);\n  });\n}\n\nvar fs;\nfunction nodeFetch (url, authorization, integrity, asBuffer) {\n  if (url.substr(0, 8) != 'file:///')\n    return Promise.reject(new Error('Unable to fetch \"' + url + '\". Only file URLs of the form file:/// supported running in Node.'));\n\n  fs = fs || require('fs');\n  if (isWindows)\n    url = url.replace(/\\//g, '\\\\').substr(8);\n  else\n    url = url.substr(7);\n\n  return new Promise(function (resolve, reject) {\n    fs.readFile(url, function(err, data) {\n      if (err) {\n        return reject(err);\n      }\n      else {\n        if (asBuffer) {\n          resolve(data);\n        }\n        else {\n          // Strip Byte Order Mark out if it's the leading char\n          var dataString = data + '';\n          if (dataString[0] === '\\ufeff')\n            dataString = dataString.substr(1);\n\n          resolve(dataString);\n        }\n      }\n    });\n  });\n}\n\nfunction noFetch () {\n  throw new Error('No fetch method is defined for this environment.');\n}\n\nvar fetchFunction;\n\nvar hasXhr = typeof XMLHttpRequest !== 'undefined';\n\nif (typeof self !== 'undefined' && typeof self.fetch !== 'undefined')\n fetchFunction = fetchFetch;\nelse if (hasXhr)\n  fetchFunction = xhrFetch;\nelse if (typeof require !== 'undefined' && typeof process !== 'undefined')\n  fetchFunction = nodeFetch;\nelse\n  fetchFunction = noFetch;\n\nvar fetch$1 = fetchFunction;\n\nfunction createMetadata () {\n  return {\n    pluginKey: undefined,\n    pluginArgument: undefined,\n    pluginModule: undefined,\n    packageKey: undefined,\n    packageConfig: undefined,\n    load: undefined\n  };\n}\n\nfunction getParentMetadata (loader, config, parentKey) {\n  var parentMetadata = createMetadata();\n\n  if (parentKey) {\n    // detect parent plugin\n    // we just need pluginKey to be truthy for package configurations\n    // so we duplicate it as pluginArgument - although not correct its not used\n    var parentPluginIndex;\n    if (config.pluginFirst) {\n      if ((parentPluginIndex = parentKey.lastIndexOf('!')) !== -1)\n        parentMetadata.pluginArgument = parentMetadata.pluginKey = parentKey.substr(0, parentPluginIndex);\n    }\n    else {\n      if ((parentPluginIndex = parentKey.indexOf('!')) !== -1)\n        parentMetadata.pluginArgument = parentMetadata.pluginKey = parentKey.substr(parentPluginIndex + 1);\n    }\n\n    // detect parent package\n    parentMetadata.packageKey = getMapMatch(config.packages, parentKey);\n    if (parentMetadata.packageKey)\n      parentMetadata.packageConfig = config.packages[parentMetadata.packageKey];\n  }\n\n  return parentMetadata;\n}\n\nfunction normalize (key, parentKey) {\n  var config = this[CONFIG];\n\n  var metadata = createMetadata();\n  var parentMetadata = getParentMetadata(this, config, parentKey);\n\n  var loader = this;\n\n  return Promise.resolve()\n\n  // boolean conditional\n  .then(function () {\n    // first we normalize the conditional\n    var booleanIndex = key.lastIndexOf('#?');\n\n    if (booleanIndex === -1)\n      return Promise.resolve(key);\n\n    var conditionObj = parseCondition.call(loader, key.substr(booleanIndex + 2));\n\n    // in builds, return normalized conditional\n    /*if (this.builder)\n      return this.resolve(conditionObj.module, parentKey)\n      .then(function (conditionModule) {\n        conditionObj.module = conditionModule;\n        return key.substr(0, booleanIndex) + '#?' + serializeCondition(conditionObj);\n      });*/\n\n    return resolveCondition.call(loader, conditionObj, parentKey, true)\n    .then(function (conditionValue) {\n      return conditionValue ? key.substr(0, booleanIndex) : '@empty';\n    });\n  })\n\n  // plugin\n  .then(function (key) {\n    var parsed = parsePlugin(config.pluginFirst, key);\n\n    if (!parsed)\n      return packageResolve.call(loader, config, key, parentMetadata && parentMetadata.pluginArgument || parentKey, metadata, parentMetadata, false);\n\n    metadata.pluginKey = parsed.plugin;\n\n    return Promise.all([\n      packageResolve.call(loader, config, parsed.argument, parentMetadata && parentMetadata.pluginArgument || parentKey, metadata, parentMetadata, true),\n      loader.resolve(parsed.plugin, parentKey)\n    ])\n    .then(function (normalized) {\n      metadata.pluginArgument = normalized[0];\n      metadata.pluginKey = normalized[1];\n\n      // don't allow a plugin to load itself\n      if (metadata.pluginArgument === metadata.pluginKey)\n        throw new Error('Plugin ' + metadata.pluginArgument + ' cannot load itself, make sure it is excluded from any wildcard meta configuration via a custom loader: false rule.');\n\n      return combinePluginParts(config.pluginFirst, normalized[0], normalized[1]);\n    });\n  })\n  .then(function (normalized) {\n    return interpolateConditional.call(loader, normalized, parentKey, parentMetadata);\n  })\n  .then(function (normalized) {\n    setMeta.call(loader, config, normalized, metadata);\n\n    if (metadata.pluginKey || !metadata.load.loader)\n      return normalized;\n\n    // loader by configuration\n    // normalizes to parent to support package loaders\n    return loader.resolve(metadata.load.loader, normalized)\n    .then(function (pluginKey) {\n      metadata.pluginKey = pluginKey;\n      metadata.pluginArgument = normalized;\n      return normalized;\n    });\n  })\n  .then(function (normalized) {\n    loader[METADATA][normalized] = metadata;\n    return normalized;\n  });\n}\n\n// normalization function used for registry keys\n// just does coreResolve without map\nfunction decanonicalize (config, key) {\n  var parsed = parsePlugin(config.pluginFirst, key);\n\n  // plugin\n  if (parsed) {\n    var pluginKey = decanonicalize.call(this, config, parsed.plugin);\n    return combinePluginParts(config.pluginFirst, coreResolve.call(this, config, parsed.argument, undefined, false, false), pluginKey);\n  }\n\n  return coreResolve.call(this, config, key, undefined, false, false);\n}\n\nfunction normalizeSync (key, parentKey) {\n  var config = this[CONFIG];\n\n  // normalizeSync is metadataless, so create metadata\n  var metadata = createMetadata();\n  var parentMetadata = parentMetadata || getParentMetadata(this, config, parentKey);\n\n  var parsed = parsePlugin(config.pluginFirst, key);\n\n  // plugin\n  if (parsed) {\n    metadata.pluginKey = normalizeSync.call(this, parsed.plugin, parentKey);\n    return combinePluginParts(config.pluginFirst,\n        packageResolveSync.call(this, config, parsed.argument, parentMetadata.pluginArgument || parentKey, metadata, parentMetadata, !!metadata.pluginKey),\n        metadata.pluginKey);\n  }\n\n  return packageResolveSync.call(this, config, key, parentMetadata.pluginArgument || parentKey, metadata, parentMetadata, !!metadata.pluginKey);\n}\n\nfunction coreResolve (config, key, parentKey, doMap, packageName) {\n  var relativeResolved = resolveIfNotPlain(key, parentKey || baseURI);\n\n  // standard URL resolution\n  if (relativeResolved)\n    return applyPaths(config.baseURL, config.paths, relativeResolved);\n\n  // plain keys not starting with './', 'x://' and '/' go through custom resolution\n  if (doMap) {\n    var mapMatch = getMapMatch(config.map, key);\n\n    if (mapMatch) {\n      key = config.map[mapMatch] + key.substr(mapMatch.length);\n\n      relativeResolved = resolveIfNotPlain(key, baseURI);\n      if (relativeResolved)\n        return applyPaths(config.baseURL, config.paths, relativeResolved);\n    }\n  }\n\n  if (this.registry.has(key))\n    return key;\n\n  if (key.substr(0, 6) === '@node/')\n    return key;\n\n  var trailingSlash = packageName && key[key.length - 1] !== '/';\n  var resolved = applyPaths(config.baseURL, config.paths, trailingSlash ? key + '/' : key);\n  if (trailingSlash)\n    return resolved.substr(0, resolved.length - 1);\n  return resolved;\n}\n\nfunction packageResolveSync (config, key, parentKey, metadata, parentMetadata, skipExtensions) {\n  // ignore . since internal maps handled by standard package resolution\n  if (parentMetadata && parentMetadata.packageConfig && key[0] !== '.') {\n    var parentMap = parentMetadata.packageConfig.map;\n    var parentMapMatch = parentMap && getMapMatch(parentMap, key);\n\n    if (parentMapMatch && typeof parentMap[parentMapMatch] === 'string') {\n      var mapped = doMapSync(this, config, parentMetadata.packageConfig, parentMetadata.packageKey, parentMapMatch, key, metadata, skipExtensions);\n      if (mapped)\n        return mapped;\n    }\n  }\n\n  var normalized = coreResolve.call(this, config, key, parentKey, true, true);\n\n  var pkgConfigMatch = getPackageConfigMatch(config, normalized);\n  metadata.packageKey = pkgConfigMatch && pkgConfigMatch.packageKey || getMapMatch(config.packages, normalized);\n\n  if (!metadata.packageKey)\n    return normalized;\n\n  if (config.packageConfigKeys.indexOf(normalized) !== -1) {\n    metadata.packageKey = undefined;\n    return normalized;\n  }\n\n  metadata.packageConfig = config.packages[metadata.packageKey] || (config.packages[metadata.packageKey] = createPackage());\n\n  var subPath = normalized.substr(metadata.packageKey.length + 1);\n\n  return applyPackageConfigSync(this, config, metadata.packageConfig, metadata.packageKey, subPath, metadata, skipExtensions);\n}\n\nfunction packageResolve (config, key, parentKey, metadata, parentMetadata, skipExtensions) {\n  var loader = this;\n\n  return resolvedPromise\n  .then(function () {\n    // ignore . since internal maps handled by standard package resolution\n    if (parentMetadata && parentMetadata.packageConfig && key.substr(0, 2) !== './') {\n      var parentMap = parentMetadata.packageConfig.map;\n      var parentMapMatch = parentMap && getMapMatch(parentMap, key);\n\n      if (parentMapMatch)\n        return doMap(loader, config, parentMetadata.packageConfig, parentMetadata.packageKey, parentMapMatch, key, metadata, skipExtensions);\n    }\n\n    return resolvedPromise;\n  })\n  .then(function (mapped) {\n    if (mapped)\n      return mapped;\n\n    // apply map, core, paths, contextual package map\n    var normalized = coreResolve.call(loader, config, key, parentKey, true, true);\n\n    var pkgConfigMatch = getPackageConfigMatch(config, normalized);\n    metadata.packageKey = pkgConfigMatch && pkgConfigMatch.packageKey || getMapMatch(config.packages, normalized);\n\n    if (!metadata.packageKey)\n      return Promise.resolve(normalized);\n\n    if (config.packageConfigKeys.indexOf(normalized) !== -1) {\n      metadata.packageKey = undefined;\n      metadata.load = createMeta();\n      metadata.load.format = 'json';\n      // ensure no loader\n      metadata.load.loader = '';\n      return Promise.resolve(normalized);\n    }\n\n    metadata.packageConfig = config.packages[metadata.packageKey] || (config.packages[metadata.packageKey] = createPackage());\n\n    // load configuration when it matches packageConfigPaths, not already configured, and not the config itself\n    var loadConfig = pkgConfigMatch && !metadata.packageConfig.configured;\n\n    return (loadConfig ? loadPackageConfigPath(loader, config, pkgConfigMatch.configPath, metadata) : resolvedPromise)\n    .then(function () {\n      var subPath = normalized.substr(metadata.packageKey.length + 1);\n\n      return applyPackageConfig(loader, config, metadata.packageConfig, metadata.packageKey, subPath, metadata, skipExtensions);\n    });\n  });\n}\n\nfunction createMeta () {\n  return {\n    extension: '',\n    deps: undefined,\n    format: undefined,\n    loader: undefined,\n    scriptLoad: undefined,\n    globals: undefined,\n    nonce: undefined,\n    integrity: undefined,\n    sourceMap: undefined,\n    exports: undefined,\n    encapsulateGlobal: false,\n    crossOrigin: undefined,\n    cjsRequireDetection: true,\n    cjsDeferDepsExecute: false,\n    esModule: false\n  };\n}\n\nfunction setMeta (config, key, metadata) {\n  metadata.load = metadata.load || createMeta();\n\n  // apply wildcard metas\n  var bestDepth = 0;\n  var wildcardIndex;\n  for (var module in config.meta) {\n    wildcardIndex = module.indexOf('*');\n    if (wildcardIndex === -1)\n      continue;\n    if (module.substr(0, wildcardIndex) === key.substr(0, wildcardIndex)\n        && module.substr(wildcardIndex + 1) === key.substr(key.length - module.length + wildcardIndex + 1)) {\n      var depth = module.split('/').length;\n      if (depth > bestDepth)\n        bestDepth = depth;\n      extendMeta(metadata.load, config.meta[module], bestDepth !== depth);\n    }\n  }\n\n  // apply exact meta\n  if (config.meta[key])\n    extendMeta(metadata.load, config.meta[key], false);\n\n  // apply package meta\n  if (metadata.packageKey) {\n    var subPath = key.substr(metadata.packageKey.length + 1);\n\n    var meta = {};\n    if (metadata.packageConfig.meta) {\n      var bestDepth = 0;\n      getMetaMatches(metadata.packageConfig.meta, subPath, function (metaPattern, matchMeta, matchDepth) {\n        if (matchDepth > bestDepth)\n          bestDepth = matchDepth;\n        extendMeta(meta, matchMeta, matchDepth && bestDepth > matchDepth);\n      });\n\n      extendMeta(metadata.load, meta, false);\n    }\n\n    // format\n    if (metadata.packageConfig.format && !metadata.pluginKey && !metadata.load.loader)\n      metadata.load.format = metadata.load.format || metadata.packageConfig.format;\n  }\n}\n\nfunction parsePlugin (pluginFirst, key) {\n  var argumentKey;\n  var pluginKey;\n\n  var pluginIndex = pluginFirst ? key.indexOf('!') : key.lastIndexOf('!');\n\n  if (pluginIndex === -1)\n    return;\n\n  if (pluginFirst) {\n    argumentKey = key.substr(pluginIndex + 1);\n    pluginKey = key.substr(0, pluginIndex);\n  }\n  else {\n    argumentKey = key.substr(0, pluginIndex);\n    pluginKey = key.substr(pluginIndex + 1) || argumentKey.substr(argumentKey.lastIndexOf('.') + 1);\n  }\n\n  return {\n    argument: argumentKey,\n    plugin: pluginKey\n  };\n}\n\n// put key back together after parts have been normalized\nfunction combinePluginParts (pluginFirst, argumentKey, pluginKey) {\n  if (pluginFirst)\n    return pluginKey + '!' + argumentKey;\n  else\n    return argumentKey + '!' + pluginKey;\n}\n\n/*\n * Package Configuration Extension\n *\n * Example:\n *\n * SystemJS.packages = {\n *   jquery: {\n *     main: 'index.js', // when not set, package key is requested directly\n *     format: 'amd',\n *     defaultExtension: 'ts', // defaults to 'js', can be set to false\n *     modules: {\n *       '*.ts': {\n *         loader: 'typescript'\n *       },\n *       'vendor/sizzle.js': {\n *         format: 'global'\n *       }\n *     },\n *     map: {\n *        // map internal require('sizzle') to local require('./vendor/sizzle')\n *        sizzle: './vendor/sizzle.js',\n *        // map any internal or external require of 'jquery/vendor/another' to 'another/index.js'\n *        './vendor/another.js': './another/index.js',\n *        // test.js / test -> lib/test.js\n *        './test.js': './lib/test.js',\n *\n *        // environment-specific map configurations\n *        './index.js': {\n *          '~browser': './index-node.js',\n *          './custom-condition.js|~export': './index-custom.js'\n *        }\n *     },\n *     // allows for setting package-prefixed depCache\n *     // keys are normalized module keys relative to the package itself\n *     depCache: {\n *       // import 'package/index.js' loads in parallel package/lib/test.js,package/vendor/sizzle.js\n *       './index.js': ['./test'],\n *       './test.js': ['external-dep'],\n *       'external-dep/path.js': ['./another.js']\n *     }\n *   }\n * };\n *\n * Then:\n *   import 'jquery'                       -> jquery/index.js\n *   import 'jquery/submodule'             -> jquery/submodule.js\n *   import 'jquery/submodule.ts'          -> jquery/submodule.ts loaded as typescript\n *   import 'jquery/vendor/another'        -> another/index.js\n *\n * Detailed Behaviours\n * - main can have a leading \"./\" can be added optionally\n * - map and defaultExtension are applied to the main\n * - defaultExtension adds the extension only if the exact extension is not present\n\n * - if a meta value is available for a module, map and defaultExtension are skipped\n * - like global map, package map also applies to subpaths (sizzle/x, ./vendor/another/sub)\n * - condition module map is '@env' module in package or '@system-env' globally\n * - map targets support conditional interpolation ('./x': './x.#{|env}.js')\n * - internal package map targets cannot use boolean conditionals\n *\n * Package Configuration Loading\n *\n * Not all packages may already have their configuration present in the System config\n * For these cases, a list of packageConfigPaths can be provided, which when matched against\n * a request, will first request a \".json\" file by the package key to derive the package\n * configuration from. This allows dynamic loading of non-predetermined code, a key use\n * case in SystemJS.\n *\n * Example:\n *\n *   SystemJS.packageConfigPaths = ['packages/test/package.json', 'packages/*.json'];\n *\n *   // will first request 'packages/new-package/package.json' for the package config\n *   // before completing the package request to 'packages/new-package/path'\n *   SystemJS.import('packages/new-package/path');\n *\n *   // will first request 'packages/test/package.json' before the main\n *   SystemJS.import('packages/test');\n *\n * When a package matches packageConfigPaths, it will always send a config request for\n * the package configuration.\n * The package key itself is taken to be the match up to and including the last wildcard\n * or trailing slash.\n * The most specific package config path will be used.\n * Any existing package configurations for the package will deeply merge with the\n * package config, with the existing package configurations taking preference.\n * To opt-out of the package configuration request for a package that matches\n * packageConfigPaths, use the { configured: true } package config option.\n *\n */\n\nfunction addDefaultExtension (config, pkg, pkgKey, subPath, skipExtensions) {\n  // don't apply extensions to folders or if defaultExtension = false\n  if (!subPath || !pkg.defaultExtension || subPath[subPath.length - 1] === '/' || skipExtensions)\n    return subPath;\n\n  var metaMatch = false;\n\n  // exact meta or meta with any content after the last wildcard skips extension\n  if (pkg.meta)\n    getMetaMatches(pkg.meta, subPath, function (metaPattern, matchMeta, matchDepth) {\n      if (matchDepth === 0 || metaPattern.lastIndexOf('*') !== metaPattern.length - 1)\n        return metaMatch = true;\n    });\n\n  // exact global meta or meta with any content after the last wildcard skips extension\n  if (!metaMatch && config.meta)\n    getMetaMatches(config.meta, pkgKey + '/' + subPath, function (metaPattern, matchMeta, matchDepth) {\n      if (matchDepth === 0 || metaPattern.lastIndexOf('*') !== metaPattern.length - 1)\n        return metaMatch = true;\n    });\n\n  if (metaMatch)\n    return subPath;\n\n  // work out what the defaultExtension is and add if not there already\n  var defaultExtension = '.' + pkg.defaultExtension;\n  if (subPath.substr(subPath.length - defaultExtension.length) !== defaultExtension)\n    return subPath + defaultExtension;\n  else\n    return subPath;\n}\n\nfunction applyPackageConfigSync (loader, config, pkg, pkgKey, subPath, metadata, skipExtensions) {\n  // main\n  if (!subPath) {\n    if (pkg.main)\n      subPath = pkg.main.substr(0, 2) === './' ? pkg.main.substr(2) : pkg.main;\n    else\n      // also no submap if key is package itself (import 'pkg' -> 'path/to/pkg.js')\n      // NB can add a default package main convention here\n      // if it becomes internal to the package then it would no longer be an exit path\n      return pkgKey;\n  }\n\n  // map config checking without then with extensions\n  if (pkg.map) {\n    var mapPath = './' + subPath;\n\n    var mapMatch = getMapMatch(pkg.map, mapPath);\n\n    // we then check map with the default extension adding\n    if (!mapMatch) {\n      mapPath = './' + addDefaultExtension(loader, pkg, pkgKey, subPath, skipExtensions);\n      if (mapPath !== './' + subPath)\n        mapMatch = getMapMatch(pkg.map, mapPath);\n    }\n    if (mapMatch) {\n      var mapped = doMapSync(loader, config, pkg, pkgKey, mapMatch, mapPath, metadata, skipExtensions);\n      if (mapped)\n        return mapped;\n    }\n  }\n\n  // normal package resolution\n  return pkgKey + '/' + addDefaultExtension(loader, pkg, pkgKey, subPath, skipExtensions);\n}\n\nfunction validMapping (mapMatch, mapped, path) {\n  // allow internal ./x -> ./x/y or ./x/ -> ./x/y recursive maps\n  // but only if the path is exactly ./x and not ./x/z\n  if (mapped.substr(0, mapMatch.length) === mapMatch && path.length > mapMatch.length)\n    return false;\n\n  return true;\n}\n\nfunction doMapSync (loader, config, pkg, pkgKey, mapMatch, path, metadata, skipExtensions) {\n  if (path[path.length - 1] === '/')\n    path = path.substr(0, path.length - 1);\n  var mapped = pkg.map[mapMatch];\n\n  if (typeof mapped === 'object')\n    throw new Error('Synchronous conditional normalization not supported sync normalizing ' + mapMatch + ' in ' + pkgKey);\n\n  if (!validMapping(mapMatch, mapped, path) || typeof mapped !== 'string')\n    return;\n\n  return packageResolveSync.call(this, config, mapped + path.substr(mapMatch.length), pkgKey + '/', metadata, metadata, skipExtensions);\n}\n\nfunction applyPackageConfig (loader, config, pkg, pkgKey, subPath, metadata, skipExtensions) {\n  // main\n  if (!subPath) {\n    if (pkg.main)\n      subPath = pkg.main.substr(0, 2) === './' ? pkg.main.substr(2) : pkg.main;\n    // also no submap if key is package itself (import 'pkg' -> 'path/to/pkg.js')\n    else\n      // NB can add a default package main convention here\n      // if it becomes internal to the package then it would no longer be an exit path\n      return Promise.resolve(pkgKey);\n  }\n\n  // map config checking without then with extensions\n  var mapPath, mapMatch;\n\n  if (pkg.map) {\n    mapPath = './' + subPath;\n    mapMatch = getMapMatch(pkg.map, mapPath);\n\n    // we then check map with the default extension adding\n    if (!mapMatch) {\n      mapPath = './' + addDefaultExtension(loader, pkg, pkgKey, subPath, skipExtensions);\n      if (mapPath !== './' + subPath)\n        mapMatch = getMapMatch(pkg.map, mapPath);\n    }\n  }\n\n  return (mapMatch ? doMap(loader, config, pkg, pkgKey, mapMatch, mapPath, metadata, skipExtensions) : resolvedPromise)\n  .then(function (mapped) {\n    if (mapped)\n      return Promise.resolve(mapped);\n\n    // normal package resolution / fallback resolution for no conditional match\n    return Promise.resolve(pkgKey + '/' + addDefaultExtension(loader, pkg, pkgKey, subPath, skipExtensions));\n  });\n}\n\nfunction doMap (loader, config, pkg, pkgKey, mapMatch, path, metadata, skipExtensions) {\n  if (path[path.length - 1] === '/')\n    path = path.substr(0, path.length - 1);\n\n  var mapped = pkg.map[mapMatch];\n\n  if (typeof mapped === 'string') {\n    if (!validMapping(mapMatch, mapped, path))\n      return resolvedPromise;\n    return packageResolve.call(loader, config, mapped + path.substr(mapMatch.length), pkgKey + '/', metadata, metadata, skipExtensions)\n    .then(function (normalized) {\n      return interpolateConditional.call(loader, normalized, pkgKey + '/', metadata);\n    });\n  }\n\n  // we use a special conditional syntax to allow the builder to handle conditional branch points further\n  /*if (loader.builder)\n    return Promise.resolve(pkgKey + '/#:' + path);*/\n\n  // we load all conditions upfront\n  var conditionPromises = [];\n  var conditions = [];\n  for (var e in mapped) {\n    var c = parseCondition(e);\n    conditions.push({\n      condition: c,\n      map: mapped[e]\n    });\n    conditionPromises.push(RegisterLoader$1.prototype.import.call(loader, c.module, pkgKey));\n  }\n\n  // map object -> conditional map\n  return Promise.all(conditionPromises)\n  .then(function (conditionValues) {\n    // first map condition to match is used\n    for (var i = 0; i < conditions.length; i++) {\n      var c = conditions[i].condition;\n      var value = readMemberExpression(c.prop, conditionValues[i].__useDefault ? conditionValues[i].default : conditionValues[i]);\n      if (!c.negate && value || c.negate && !value)\n        return conditions[i].map;\n    }\n  })\n  .then(function (mapped) {\n    if (mapped) {\n      if (!validMapping(mapMatch, mapped, path))\n        return resolvedPromise;\n      return packageResolve.call(loader, config, mapped + path.substr(mapMatch.length), pkgKey + '/', metadata, metadata, skipExtensions)\n      .then(function (normalized) {\n        return interpolateConditional.call(loader, normalized, pkgKey + '/', metadata);\n      });\n    }\n\n    // no environment match -> fallback to original subPath by returning undefined\n  });\n}\n\n// check if the given normalized key matches a packageConfigPath\n// if so, loads the config\nvar packageConfigPaths = {};\n\n// data object for quick checks against package paths\nfunction createPkgConfigPathObj (path) {\n  var lastWildcard = path.lastIndexOf('*');\n  var length = Math.max(lastWildcard + 1, path.lastIndexOf('/'));\n  return {\n    length: length,\n    regEx: new RegExp('^(' + path.substr(0, length).replace(/[.+?^${}()|[\\]\\\\]/g, '\\\\$&').replace(/\\*/g, '[^\\\\/]+') + ')(\\\\/|$)'),\n    wildcard: lastWildcard !== -1\n  };\n}\n\n// most specific match wins\nfunction getPackageConfigMatch (config, normalized) {\n  var pkgKey, exactMatch = false, configPath;\n  for (var i = 0; i < config.packageConfigPaths.length; i++) {\n    var packageConfigPath = config.packageConfigPaths[i];\n    var p = packageConfigPaths[packageConfigPath] || (packageConfigPaths[packageConfigPath] = createPkgConfigPathObj(packageConfigPath));\n    if (normalized.length < p.length)\n      continue;\n    var match = normalized.match(p.regEx);\n    if (match && (!pkgKey || (!(exactMatch && p.wildcard) && pkgKey.length < match[1].length))) {\n      pkgKey = match[1];\n      exactMatch = !p.wildcard;\n      configPath = pkgKey + packageConfigPath.substr(p.length);\n    }\n  }\n\n  if (!pkgKey)\n    return;\n\n  return {\n    packageKey: pkgKey,\n    configPath: configPath\n  };\n}\n\nfunction loadPackageConfigPath (loader, config, pkgConfigPath, metadata, normalized) {\n  var configLoader = loader.pluginLoader || loader;\n\n  // ensure we note this is a package config file path\n  // it will then be skipped from getting other normalizations itself to ensure idempotency\n  if (config.packageConfigKeys.indexOf(pkgConfigPath) === -1)\n    config.packageConfigKeys.push(pkgConfigPath);\n\n  return configLoader.import(pkgConfigPath)\n  .then(function (pkgConfig) {\n    setPkgConfig(metadata.packageConfig, pkgConfig, metadata.packageKey, true, config);\n    metadata.packageConfig.configured = true;\n  })\n  .catch(function (err) {\n    throw LoaderError__Check_error_message_for_loader_stack(err, 'Unable to fetch package configuration file ' + pkgConfigPath);\n  });\n}\n\nfunction getMetaMatches (pkgMeta, subPath, matchFn) {\n  // wildcard meta\n  var wildcardIndex;\n  for (var module in pkgMeta) {\n    // allow meta to start with ./ for flexibility\n    var dotRel = module.substr(0, 2) === './' ? './' : '';\n    if (dotRel)\n      module = module.substr(2);\n\n    wildcardIndex = module.indexOf('*');\n    if (wildcardIndex === -1)\n      continue;\n\n    if (module.substr(0, wildcardIndex) === subPath.substr(0, wildcardIndex)\n        && module.substr(wildcardIndex + 1) === subPath.substr(subPath.length - module.length + wildcardIndex + 1)) {\n      // alow match function to return true for an exit path\n      if (matchFn(module, pkgMeta[dotRel + module], module.split('/').length))\n        return;\n    }\n  }\n  // exact meta\n  var exactMeta = pkgMeta[subPath] && Object.hasOwnProperty.call(pkgMeta, subPath) ? pkgMeta[subPath] : pkgMeta['./' + subPath];\n  if (exactMeta)\n    matchFn(exactMeta, exactMeta, 0);\n}\n\n\n/*\n * Conditions Extension\n *\n *   Allows a condition module to alter the resolution of an import via syntax:\n *\n *     import $ from 'jquery/#{browser}';\n *\n *   Will first load the module 'browser' via `SystemJS.import('browser')` and\n *   take the default export of that module.\n *   If the default export is not a string, an error is thrown.\n *\n *   We then substitute the string into the require to get the conditional resolution\n *   enabling environment-specific variations like:\n *\n *     import $ from 'jquery/ie'\n *     import $ from 'jquery/firefox'\n *     import $ from 'jquery/chrome'\n *     import $ from 'jquery/safari'\n *\n *   It can be useful for a condition module to define multiple conditions.\n *   This can be done via the `|` modifier to specify an export member expression:\n *\n *     import 'jquery/#{./browser.js|grade.version}'\n *\n *   Where the `grade` export `version` member in the `browser.js` module  is substituted.\n *\n *\n * Boolean Conditionals\n *\n *   For polyfill modules, that are used as imports but have no module value,\n *   a binary conditional allows a module not to be loaded at all if not needed:\n *\n *     import 'es5-shim#?./conditions.js|needs-es5shim'\n *\n *   These conditions can also be negated via:\n *\n *     import 'es5-shim#?./conditions.js|~es6'\n *\n */\n\nvar sysConditions = ['browser', 'node', 'dev', 'build', 'production', 'default'];\n\nfunction parseCondition (condition) {\n  var conditionExport, conditionModule, negation;\n\n  var negation;\n  var conditionExportIndex = condition.lastIndexOf('|');\n  if (conditionExportIndex !== -1) {\n    conditionExport = condition.substr(conditionExportIndex + 1);\n    conditionModule = condition.substr(0, conditionExportIndex);\n\n    if (conditionExport[0] === '~') {\n      negation = true;\n      conditionExport = conditionExport.substr(1);\n    }\n  }\n  else {\n    negation = condition[0] === '~';\n    conditionExport = 'default';\n    conditionModule = condition.substr(negation);\n    if (sysConditions.indexOf(conditionModule) !== -1) {\n      conditionExport = conditionModule;\n      conditionModule = null;\n    }\n  }\n\n  return {\n    module: conditionModule || '@system-env',\n    prop: conditionExport,\n    negate: negation\n  };\n}\n\nfunction resolveCondition (conditionObj, parentKey, bool) {\n  // import without __useDefault handling here\n  return RegisterLoader$1.prototype.import.call(this, conditionObj.module, parentKey)\n  .then(function (condition) {\n    var m = readMemberExpression(conditionObj.prop, condition);\n\n    if (bool && typeof m !== 'boolean')\n      throw new TypeError('Condition did not resolve to a boolean.');\n\n    return conditionObj.negate ? !m : m;\n  });\n}\n\nvar interpolationRegEx = /#\\{[^\\}]+\\}/;\nfunction interpolateConditional (key, parentKey, parentMetadata) {\n  // first we normalize the conditional\n  var conditionalMatch = key.match(interpolationRegEx);\n\n  if (!conditionalMatch)\n    return Promise.resolve(key);\n\n  var conditionObj = parseCondition.call(this, conditionalMatch[0].substr(2, conditionalMatch[0].length - 3));\n\n  // in builds, return normalized conditional\n  /*if (this.builder)\n    return this.normalize(conditionObj.module, parentKey, createMetadata(), parentMetadata)\n    .then(function (conditionModule) {\n      conditionObj.module = conditionModule;\n      return key.replace(interpolationRegEx, '#{' + serializeCondition(conditionObj) + '}');\n    });*/\n\n  return resolveCondition.call(this, conditionObj, parentKey, false)\n  .then(function (conditionValue) {\n    if (typeof conditionValue !== 'string')\n      throw new TypeError('The condition value for ' + key + ' doesn\\'t resolve to a string.');\n\n    if (conditionValue.indexOf('/') !== -1)\n      throw new TypeError('Unabled to interpolate conditional ' + key + (parentKey ? ' in ' + parentKey : '') + '\\n\\tThe condition value ' + conditionValue + ' cannot contain a \"/\" separator.');\n\n    return key.replace(interpolationRegEx, conditionValue);\n  });\n}\n\n/*\n Extend config merging one deep only\n\n  loader.config({\n    some: 'random',\n    config: 'here',\n    deep: {\n      config: { too: 'too' }\n    }\n  });\n\n  <=>\n\n  loader.some = 'random';\n  loader.config = 'here'\n  loader.deep = loader.deep || {};\n  loader.deep.config = { too: 'too' };\n\n\n  Normalizes meta and package configs allowing for:\n\n  SystemJS.config({\n    meta: {\n      './index.js': {}\n    }\n  });\n\n  To become\n\n  SystemJS.meta['https://thissite.com/index.js'] = {};\n\n  For easy normalization canonicalization with latest URL support.\n\n*/\nvar envConfigNames = ['browserConfig', 'nodeConfig', 'devConfig', 'buildConfig', 'productionConfig'];\nfunction envSet(loader, cfg, envCallback) {\n  for (var i = 0; i < envConfigNames.length; i++) {\n    var envConfig = envConfigNames[i];\n    if (cfg[envConfig] && envModule[envConfig.substr(0, envConfig.length - 6)])\n      envCallback(cfg[envConfig]);\n  }\n}\n\nfunction cloneObj (obj, maxDepth) {\n  var clone = {};\n  for (var p in obj) {\n    var prop = obj[p];\n    if (maxDepth > 1) {\n      if (prop instanceof Array)\n        clone[p] = [].concat(prop);\n      else if (typeof prop === 'object')\n        clone[p] = cloneObj(prop, maxDepth - 1);\n      else if (p !== 'packageConfig')\n        clone[p] = prop;\n    }\n    else {\n      clone[p] = prop;\n    }\n  }\n  return clone;\n}\n\nfunction getConfigItem (config, p) {\n  var cfgItem = config[p];\n\n  // getConfig must return an unmodifiable clone of the configuration\n  if (cfgItem instanceof Array)\n    return config[p].concat([]);\n  else if (typeof cfgItem === 'object')\n    return cloneObj(cfgItem, 3)\n  else\n    return config[p];\n}\n\nfunction getConfig (configName) {\n  if (configName) {\n    if (configNames.indexOf(configName) !== -1)\n      return getConfigItem(this[CONFIG], configName);\n    throw new Error('\"' + configName + '\" is not a valid configuration name. Must be one of ' + configNames.join(', ') + '.');\n  }\n\n  var cfg = {};\n  for (var i = 0; i < configNames.length; i++) {\n    var p = configNames[i];\n    var configItem = getConfigItem(this[CONFIG], p);\n    if (configItem !== undefined)\n      cfg[p] = configItem;\n  }\n  return cfg;\n}\n\nfunction setConfig (cfg, isEnvConfig) {\n  var loader = this;\n  var config = this[CONFIG];\n\n  if ('warnings' in cfg)\n    config.warnings = cfg.warnings;\n\n  if ('wasm' in cfg)\n    config.wasm = typeof WebAssembly !== 'undefined' && cfg.wasm;\n\n  if ('production' in cfg || 'build' in cfg)\n    setProduction.call(loader, !!cfg.production, !!(cfg.build || envModule && envModule.build));\n\n  if (!isEnvConfig) {\n    // if using nodeConfig / browserConfig / productionConfig, take baseURL from there\n    // these exceptions will be unnecessary when we can properly implement config queuings\n    var baseURL;\n    envSet(loader, cfg, function(cfg) {\n      baseURL = baseURL || cfg.baseURL;\n    });\n    baseURL = baseURL || cfg.baseURL;\n\n    // always configure baseURL first\n    if (baseURL) {\n      config.baseURL = resolveIfNotPlain(baseURL, baseURI) || resolveIfNotPlain('./' + baseURL, baseURI);\n      if (config.baseURL[config.baseURL.length - 1] !== '/')\n        config.baseURL += '/';\n    }\n\n    if (cfg.paths)\n      extend(config.paths, cfg.paths);\n\n    envSet(loader, cfg, function(cfg) {\n      if (cfg.paths)\n        extend(config.paths, cfg.paths);\n    });\n\n    for (var p in config.paths) {\n      if (config.paths[p].indexOf('*') === -1)\n        continue;\n      warn.call(config, 'Path config ' + p + ' -> ' + config.paths[p] + ' is no longer supported as wildcards are deprecated.');\n      delete config.paths[p];\n    }\n  }\n\n  if (cfg.defaultJSExtensions)\n    warn.call(config, 'The defaultJSExtensions configuration option is deprecated.\\n  Use packages defaultExtension instead.', true);\n\n  if (typeof cfg.pluginFirst === 'boolean')\n    config.pluginFirst = cfg.pluginFirst;\n\n  if (cfg.map) {\n    for (var p in cfg.map) {\n      var v = cfg.map[p];\n\n      if (typeof v === 'string') {\n        var mapped = coreResolve.call(loader, config, v, undefined, false, false);\n        if (mapped[mapped.length -1] === '/' && p[p.length - 1] !== ':' && p[p.length - 1] !== '/')\n          mapped = mapped.substr(0, mapped.length - 1);\n        config.map[p] = mapped;\n      }\n\n      // object map\n      else {\n        var pkgName = coreResolve.call(loader, config, p[p.length - 1] !== '/' ? p + '/' : p, undefined, true, true);\n        pkgName = pkgName.substr(0, pkgName.length - 1);\n\n        var pkg = config.packages[pkgName];\n        if (!pkg) {\n          pkg = config.packages[pkgName] = createPackage();\n          // use '' instead of false to keep type consistent\n          pkg.defaultExtension = '';\n        }\n        setPkgConfig(pkg, { map: v }, pkgName, false, config);\n      }\n    }\n  }\n\n  if (cfg.packageConfigPaths) {\n    var packageConfigPaths = [];\n    for (var i = 0; i < cfg.packageConfigPaths.length; i++) {\n      var path = cfg.packageConfigPaths[i];\n      var packageLength = Math.max(path.lastIndexOf('*') + 1, path.lastIndexOf('/'));\n      var normalized = coreResolve.call(loader, config, path.substr(0, packageLength), undefined, false, false);\n      packageConfigPaths[i] = normalized + path.substr(packageLength);\n    }\n    config.packageConfigPaths = packageConfigPaths;\n  }\n\n  if (cfg.bundles) {\n    for (var p in cfg.bundles) {\n      var bundle = [];\n      for (var i = 0; i < cfg.bundles[p].length; i++)\n        bundle.push(loader.normalizeSync(cfg.bundles[p][i]));\n      config.bundles[p] = bundle;\n    }\n  }\n\n  if (cfg.packages) {\n    for (var p in cfg.packages) {\n      if (p.match(/^([^\\/]+:)?\\/\\/$/))\n        throw new TypeError('\"' + p + '\" is not a valid package name.');\n\n      var pkgName = coreResolve.call(loader, config, p[p.length - 1] !== '/' ? p + '/' : p, undefined, true, true);\n      pkgName = pkgName.substr(0, pkgName.length - 1);\n\n      setPkgConfig(config.packages[pkgName] = config.packages[pkgName] || createPackage(), cfg.packages[p], pkgName, false, config);\n    }\n  }\n\n  if (cfg.depCache) {\n    for (var p in cfg.depCache)\n      config.depCache[loader.normalizeSync(p)] = [].concat(cfg.depCache[p]);\n  }\n\n  if (cfg.meta) {\n    for (var p in cfg.meta) {\n      // base wildcard stays base\n      if (p[0] === '*') {\n        extend(config.meta[p] = config.meta[p] || {}, cfg.meta[p]);\n      }\n      else {\n        var resolved = coreResolve.call(loader, config, p, undefined, true, true);\n        extend(config.meta[resolved] = config.meta[resolved] || {}, cfg.meta[p]);\n      }\n    }\n  }\n\n  if ('transpiler' in cfg)\n    config.transpiler = cfg.transpiler;\n\n\n  // copy any remaining non-standard configuration properties\n  for (var c in cfg) {\n    if (configNames.indexOf(c) !== -1)\n      continue;\n    if (envConfigNames.indexOf(c) !== -1)\n      continue;\n\n    // warn.call(config, 'Setting custom config option `System.config({ ' + c + ': ... })` is deprecated. Avoid custom config options or set SystemJS.' + c + ' = ... directly.');\n    loader[c] = cfg[c];\n  }\n\n  envSet(loader, cfg, function(cfg) {\n    loader.config(cfg, true);\n  });\n}\n\nfunction createPackage () {\n  return {\n    defaultExtension: undefined,\n    main: undefined,\n    format: undefined,\n    meta: undefined,\n    map: undefined,\n    packageConfig: undefined,\n    configured: false\n  };\n}\n\n// deeply-merge (to first level) config with any existing package config\nfunction setPkgConfig (pkg, cfg, pkgName, prependConfig, config) {\n  for (var prop in cfg) {\n    if (prop === 'main' || prop === 'format' || prop === 'defaultExtension' || prop === 'configured') {\n      if (!prependConfig || pkg[prop] === undefined)\n        pkg[prop] = cfg[prop];\n    }\n    else if (prop === 'map') {\n      (prependConfig ? prepend : extend)(pkg.map = pkg.map || {}, cfg.map);\n    }\n    else if (prop === 'meta') {\n      (prependConfig ? prepend : extend)(pkg.meta = pkg.meta || {}, cfg.meta);\n    }\n    else if (Object.hasOwnProperty.call(cfg, prop)) {\n      warn.call(config, '\"' + prop + '\" is not a valid package configuration option in package ' + pkgName);\n    }\n  }\n\n  // default defaultExtension for packages only\n  if (pkg.defaultExtension === undefined)\n    pkg.defaultExtension = 'js';\n\n  if (pkg.main === undefined && pkg.map && pkg.map['.']) {\n    pkg.main = pkg.map['.'];\n    delete pkg.map['.'];\n  }\n  // main object becomes main map\n  else if (typeof pkg.main === 'object') {\n    pkg.map = pkg.map || {};\n    pkg.map['./@main'] = pkg.main;\n    pkg.main['default'] = pkg.main['default'] || './';\n    pkg.main = '@main';\n  }\n\n  return pkg;\n}\n\nvar hasBuffer = typeof Buffer !== 'undefined';\ntry {\n  if (hasBuffer && new Buffer('a').toString('base64') !== 'YQ==')\n    hasBuffer = false;\n}\ncatch (e) {\n  hasBuffer = false;\n}\n\nvar sourceMapPrefix = '\\n//# sourceMapping' + 'URL=data:application/json;base64,';\nfunction inlineSourceMap (sourceMapString) {\n  if (hasBuffer)\n    return sourceMapPrefix + new Buffer(sourceMapString).toString('base64');\n  else if (typeof btoa !== 'undefined')\n    return sourceMapPrefix + btoa(unescape(encodeURIComponent(sourceMapString)));\n  else\n    return '';\n}\n\nfunction getSource(source, sourceMap, address, wrap) {\n  var lastLineIndex = source.lastIndexOf('\\n');\n\n  if (sourceMap) {\n    if (typeof sourceMap != 'object')\n      throw new TypeError('load.metadata.sourceMap must be set to an object.');\n\n    sourceMap = JSON.stringify(sourceMap);\n  }\n\n  return (wrap ? '(function(System, SystemJS) {' : '') + source + (wrap ? '\\n})(System, System);' : '')\n      // adds the sourceURL comment if not already present\n      + (source.substr(lastLineIndex, 15) != '\\n//# sourceURL='\n        ? '\\n//# sourceURL=' + address + (sourceMap ? '!transpiled' : '') : '')\n      // add sourceMappingURL if load.metadata.sourceMap is set\n      + (sourceMap && inlineSourceMap(sourceMap) || '');\n}\n\n// script execution via injecting a script tag into the page\n// this allows CSP nonce to be set for CSP environments\nvar head;\nfunction scriptExec(loader, source, sourceMap, address, nonce) {\n  if (!head)\n    head = document.head || document.body || document.documentElement;\n\n  var script = document.createElement('script');\n  script.text = getSource(source, sourceMap, address, false);\n  var onerror = window.onerror;\n  var e;\n  window.onerror = function(_e) {\n    e = addToError(_e, 'Evaluating ' + address);\n    if (onerror)\n      onerror.apply(this, arguments);\n  };\n  preExec(loader);\n\n  if (nonce)\n    script.setAttribute('nonce', nonce);\n\n  head.appendChild(script);\n  head.removeChild(script);\n  postExec();\n  window.onerror = onerror;\n  if (e)\n    return e;\n}\n\nvar vm;\nvar useVm;\n\nvar curSystem;\n\nvar callCounter = 0;\nfunction preExec (loader) {\n  if (callCounter++ == 0)\n    curSystem = envGlobal.System;\n  envGlobal.System = envGlobal.SystemJS = loader;\n}\nfunction postExec () {\n  if (--callCounter == 0)\n    envGlobal.System = envGlobal.SystemJS = curSystem;\n}\n\nvar supportsScriptExec = false;\nif (isBrowser && typeof document != 'undefined' && document.getElementsByTagName) {\n  if (!(window.chrome && window.chrome.extension || navigator.userAgent.match(/^Node\\.js/)))\n    supportsScriptExec = true;\n}\n\nfunction evaluate (loader, source, sourceMap, address, integrity, nonce, noWrap) {\n  if (!source)\n    return;\n  if (nonce && supportsScriptExec)\n    return scriptExec(loader, source, sourceMap, address, nonce);\n  try {\n    preExec(loader);\n    // global scoped eval for node (avoids require scope leak)\n    if (!vm && loader._nodeRequire) {\n      vm = loader._nodeRequire('vm');\n      useVm = vm.runInThisContext(\"typeof System !== 'undefined' && System\") === loader;\n    }\n    if (useVm)\n      vm.runInThisContext(getSource(source, sourceMap, address, !noWrap), { filename: address + (sourceMap ? '!transpiled' : '') });\n    else\n      (0, eval)(getSource(source, sourceMap, address, !noWrap));\n    postExec();\n  }\n  catch (e) {\n    postExec();\n    return e;\n  }\n}\n\nvar formatHelpers = function (loader) {\n  loader.set('@@cjs-helpers', loader.newModule({\n    requireResolve: requireResolve.bind(loader),\n    getPathVars: getPathVars\n  }));\n\n  loader.set('@@global-helpers', loader.newModule({\n    prepareGlobal: prepareGlobal\n  }));\n\n  /*\n    AMD-compatible require\n    To copy RequireJS, set window.require = window.requirejs = loader.amdRequire\n  */\n  function require (names, callback, errback, referer) {\n    // in amd, first arg can be a config object... we just ignore\n    if (typeof names === 'object' && !(names instanceof Array))\n      return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));\n\n    // amd require\n    if (typeof names === 'string' && typeof callback === 'function')\n      names = [names];\n    if (names instanceof Array) {\n      var dynamicRequires = [];\n      for (var i = 0; i < names.length; i++)\n        dynamicRequires.push(loader.import(names[i], referer));\n      Promise.all(dynamicRequires).then(function (modules) {\n        for (var i = 0; i < modules.length; i++)\n          modules[i] = modules[i].__useDefault ? modules[i].default : modules[i];\n        if (callback)\n          callback.apply(null, modules);\n      }, errback);\n    }\n\n    // commonjs require\n    else if (typeof names === 'string') {\n      var normalized = loader.decanonicalize(names, referer);\n      var module = loader.get(normalized);\n      if (!module)\n        throw new Error('Module not already loaded loading \"' + names + '\" as ' + normalized + (referer ? ' from \"' + referer + '\".' : '.'));\n      return module.__useDefault ? module.default : module;\n    }\n\n    else\n      throw new TypeError('Invalid require');\n  }\n\n  function define (name, deps, factory) {\n    if (typeof name !== 'string') {\n      factory = deps;\n      deps = name;\n      name = null;\n    }\n\n    if (!(deps instanceof Array)) {\n      factory = deps;\n      deps = ['require', 'exports', 'module'].splice(0, factory.length);\n    }\n\n    if (typeof factory !== 'function')\n      factory = (function (factory) {\n        return function() { return factory; }\n      })(factory);\n\n    if (!name) {\n      if (curMetaDeps) {\n        deps = deps.concat(curMetaDeps);\n        curMetaDeps = undefined;\n      }\n    }\n\n    // remove system dependencies\n    var requireIndex, exportsIndex, moduleIndex;\n\n    if ((requireIndex = deps.indexOf('require')) !== -1) {\n\n      deps.splice(requireIndex, 1);\n\n      // only trace cjs requires for non-named\n      // named defines assume the trace has already been done\n      if (!name)\n        deps = deps.concat(amdGetCJSDeps(factory.toString(), requireIndex));\n    }\n\n    if ((exportsIndex = deps.indexOf('exports')) !== -1)\n      deps.splice(exportsIndex, 1);\n\n    if ((moduleIndex = deps.indexOf('module')) !== -1)\n      deps.splice(moduleIndex, 1);\n\n    function execute (req, exports, module) {\n      var depValues = [];\n      for (var i = 0; i < deps.length; i++)\n        depValues.push(req(deps[i]));\n\n      module.uri = module.id;\n\n      module.config = noop;\n\n      // add back in system dependencies\n      if (moduleIndex !== -1)\n        depValues.splice(moduleIndex, 0, module);\n\n      if (exportsIndex !== -1)\n        depValues.splice(exportsIndex, 0, exports);\n\n      if (requireIndex !== -1) {\n        var contextualRequire = function (names, callback, errback) {\n          if (typeof names === 'string' && typeof callback !== 'function')\n            return req(names);\n          return require.call(loader, names, callback, errback, module.id);\n        };\n        contextualRequire.toUrl = function (name) {\n          return loader.normalizeSync(name, module.id);\n        };\n        depValues.splice(requireIndex, 0, contextualRequire);\n      }\n\n      // set global require to AMD require\n      var curRequire = envGlobal.require;\n      envGlobal.require = require;\n\n      var output = factory.apply(exportsIndex === -1 ? envGlobal : exports, depValues);\n\n      envGlobal.require = curRequire;\n\n      if (typeof output !== 'undefined')\n        module.exports = output;\n    }\n\n    // anonymous define\n    if (!name) {\n      loader.registerDynamic(deps, false, curEsModule ? wrapEsModuleExecute(execute) : execute);\n    }\n    else {\n      loader.registerDynamic(name, deps, false, execute);\n\n      // if we don't have any other defines,\n      // then let this be an anonymous define\n      // this is just to support single modules of the form:\n      // define('jquery')\n      // still loading anonymously\n      // because it is done widely enough to be useful\n      // as soon as there is more than one define, this gets removed though\n      if (lastNamedDefine) {\n        lastNamedDefine = undefined;\n        multipleNamedDefines = true;\n      }\n      else if (!multipleNamedDefines) {\n        lastNamedDefine = [deps, execute];\n      }\n    }\n  }\n  define.amd = {};\n\n  loader.amdDefine = define;\n  loader.amdRequire = require;\n};\n\n// CJS\nvar windowOrigin;\nif (typeof window !== 'undefined' && typeof document !== 'undefined' && window.location)\n  windowOrigin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n\nfunction stripOrigin(path) {\n  if (path.substr(0, 8) === 'file:///')\n    return path.substr(7 + !!isWindows);\n\n  if (windowOrigin && path.substr(0, windowOrigin.length) === windowOrigin)\n    return path.substr(windowOrigin.length);\n\n  return path;\n}\n\nfunction requireResolve (request, parentId) {\n  return stripOrigin(this.normalizeSync(request, parentId));\n}\n\nfunction getPathVars (moduleId) {\n  // remove any plugin syntax\n  var pluginIndex = moduleId.lastIndexOf('!');\n  var filename;\n  if (pluginIndex !== -1)\n    filename = moduleId.substr(0, pluginIndex);\n  else\n    filename = moduleId;\n\n  var dirname = filename.split('/');\n  dirname.pop();\n  dirname = dirname.join('/');\n\n  return {\n    filename: stripOrigin(filename),\n    dirname: stripOrigin(dirname)\n  };\n}\n\nvar commentRegEx$1 = /(^|[^\\\\])(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg;\nvar stringRegEx$1 = /(\"[^\"\\\\\\n\\r]*(\\\\.[^\"\\\\\\n\\r]*)*\"|'[^'\\\\\\n\\r]*(\\\\.[^'\\\\\\n\\r]*)*')/g;\n\n// extract CJS dependencies from source text via regex static analysis\n// read require('x') statements not in comments or strings\nfunction getCJSDeps (source) {\n  cjsRequireRegEx.lastIndex = commentRegEx$1.lastIndex = stringRegEx$1.lastIndex = 0;\n\n  var deps = [];\n\n  var match;\n\n  // track string and comment locations for unminified source\n  var stringLocations = [], commentLocations = [];\n\n  function inLocation (locations, match) {\n    for (var i = 0; i < locations.length; i++)\n      if (locations[i][0] < match.index && locations[i][1] > match.index)\n        return true;\n    return false;\n  }\n\n  if (source.length / source.split('\\n').length < 200) {\n    while (match = stringRegEx$1.exec(source))\n      stringLocations.push([match.index, match.index + match[0].length]);\n\n    // TODO: track template literals here before comments\n\n    while (match = commentRegEx$1.exec(source)) {\n      // only track comments not starting in strings\n      if (!inLocation(stringLocations, match))\n        commentLocations.push([match.index + match[1].length, match.index + match[0].length - 1]);\n    }\n  }\n\n  while (match = cjsRequireRegEx.exec(source)) {\n    // ensure we're not within a string or comment location\n    if (!inLocation(stringLocations, match) && !inLocation(commentLocations, match)) {\n      var dep = match[1].substr(1, match[1].length - 2);\n      // skip cases like require('\" + file + \"')\n      if (dep.match(/\"|'/))\n        continue;\n      deps.push(dep);\n    }\n  }\n\n  return deps;\n}\n\n// Global\n// bare minimum ignores\nvar ignoredGlobalProps = ['_g', 'sessionStorage', 'localStorage', 'clipboardData', 'frames', 'frameElement', 'external',\n  'mozAnimationStartTime', 'webkitStorageInfo', 'webkitIndexedDB', 'mozInnerScreenY', 'mozInnerScreenX'];\n\nvar globalSnapshot;\nfunction globalIterator (globalName) {\n  if (ignoredGlobalProps.indexOf(globalName) !== -1)\n    return;\n  try {\n    var value = envGlobal[globalName];\n  }\n  catch (e) {\n    ignoredGlobalProps.push(globalName);\n  }\n  this(globalName, value);\n}\n\nfunction getGlobalValue (exports) {\n  if (typeof exports === 'string')\n    return readMemberExpression(exports, envGlobal);\n\n  if (!(exports instanceof Array))\n    throw new Error('Global exports must be a string or array.');\n\n  var globalValue = {};\n  for (var i = 0; i < exports.length; i++)\n    globalValue[exports[i].split('.').pop()] = readMemberExpression(exports[i], envGlobal);\n  return globalValue;\n}\n\nfunction prepareGlobal (moduleName, exports, globals, encapsulate) {\n  // disable module detection\n  var curDefine = envGlobal.define;\n\n  envGlobal.define = undefined;\n\n  // set globals\n  var oldGlobals;\n  if (globals) {\n    oldGlobals = {};\n    for (var g in globals) {\n      oldGlobals[g] = envGlobal[g];\n      envGlobal[g] = globals[g];\n    }\n  }\n\n  // store a complete copy of the global object in order to detect changes\n  if (!exports) {\n    globalSnapshot = {};\n\n    Object.keys(envGlobal).forEach(globalIterator, function (name, value) {\n      globalSnapshot[name] = value;\n    });\n  }\n\n  // return function to retrieve global\n  return function () {\n    var globalValue = exports ? getGlobalValue(exports) : {};\n\n    var singleGlobal;\n    var multipleExports = !!exports;\n\n    if (!exports || encapsulate)\n      Object.keys(envGlobal).forEach(globalIterator, function (name, value) {\n        if (globalSnapshot[name] === value)\n          return;\n        if (value === undefined)\n          return;\n\n        // allow global encapsulation where globals are removed\n        if (encapsulate)\n          envGlobal[name] = undefined;\n\n        if (!exports) {\n          globalValue[name] = value;\n\n          if (singleGlobal !== undefined) {\n            if (!multipleExports && singleGlobal !== value)\n              multipleExports = true;\n          }\n          else {\n            singleGlobal = value;\n          }\n        }\n      });\n\n    globalValue = multipleExports ? globalValue : singleGlobal;\n\n    // revert globals\n    if (oldGlobals) {\n      for (var g in oldGlobals)\n        envGlobal[g] = oldGlobals[g];\n    }\n    envGlobal.define = curDefine;\n\n    return globalValue;\n  };\n}\n\n// AMD\nvar cjsRequirePre = \"(?:^|[^$_a-zA-Z\\\\xA0-\\\\uFFFF.])\";\nvar cjsRequirePost = \"\\\\s*\\\\(\\\\s*(\\\"([^\\\"]+)\\\"|'([^']+)')\\\\s*\\\\)\";\nvar fnBracketRegEx = /\\(([^\\)]*)\\)/;\nvar wsRegEx = /^\\s+|\\s+$/g;\n\nvar requireRegExs = {};\n\nfunction amdGetCJSDeps(source, requireIndex) {\n\n  // remove comments\n  source = source.replace(commentRegEx$1, '');\n\n  // determine the require alias\n  var params = source.match(fnBracketRegEx);\n  var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');\n\n  // find or generate the regex for this requireAlias\n  var requireRegEx = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp(cjsRequirePre + requireAlias + cjsRequirePost, 'g'));\n\n  requireRegEx.lastIndex = 0;\n\n  var deps = [];\n\n  var match;\n  while (match = requireRegEx.exec(source))\n    deps.push(match[2] || match[3]);\n\n  return deps;\n}\n\nfunction wrapEsModuleExecute (execute) {\n  return function (require, exports, module) {\n    execute(require, exports, module);\n    exports = module.exports;\n    if ((typeof exports === 'object' || typeof exports === 'function') && !('__esModule' in exports))\n      Object.defineProperty(module.exports, '__esModule', {\n        value: true\n      });\n  };\n}\n\n// generate anonymous define from singular named define\nvar multipleNamedDefines = false;\nvar lastNamedDefine;\nvar curMetaDeps;\nvar curEsModule = false;\nfunction clearLastDefine (metaDeps, esModule) {\n  curMetaDeps = metaDeps;\n  curEsModule = esModule;\n  lastNamedDefine = undefined;\n  multipleNamedDefines = false;\n}\nfunction registerLastDefine (loader) {\n  if (lastNamedDefine)\n    loader.registerDynamic(curMetaDeps ? lastNamedDefine[0].concat(curMetaDeps) : lastNamedDefine[0],\n        false, curEsModule ? wrapEsModuleExecute(lastNamedDefine[1]) : lastNamedDefine[1]);\n\n  // bundles are an empty module\n  else if (multipleNamedDefines)\n    loader.registerDynamic([], false, noop);\n}\n\nvar supportsScriptLoad = (isBrowser || isWorker) && typeof navigator !== 'undefined' && navigator.userAgent && !navigator.userAgent.match(/MSIE (9|10).0/);\n\n// include the node require since we're overriding it\nvar nodeRequire;\nif (typeof require !== 'undefined' && typeof process !== 'undefined' && !process.browser)\n  nodeRequire = require;\n\nfunction setMetaEsModule (metadata, moduleValue) {\n  if (metadata.load.esModule && (typeof moduleValue === 'object' || typeof moduleValue === 'function') &&\n      !('__esModule' in moduleValue))\n    Object.defineProperty(moduleValue, '__esModule', {\n      value: true\n    });\n}\n\nfunction instantiate$1 (key, processAnonRegister) {\n  var loader = this;\n  var config = this[CONFIG];\n  // first do bundles and depCache\n  return (loadBundlesAndDepCache(config, this, key) || resolvedPromise)\n  .then(function () {\n    if (processAnonRegister())\n      return;\n\n    var metadata = loader[METADATA][key];\n\n    // node module loading\n    if (key.substr(0, 6) === '@node/') {\n      if (!loader._nodeRequire)\n        throw new TypeError('Error loading ' + key + '. Can only load node core modules in Node.');\n      loader.registerDynamic([], false, function () {\n        return loadNodeModule.call(loader, key.substr(6), loader.baseURL);\n      });\n      processAnonRegister();\n      return;\n    }\n\n    if (metadata.load.scriptLoad ) {\n      if (metadata.load.pluginKey || !supportsScriptLoad) {\n        metadata.load.scriptLoad = false;\n        warn.call(config, 'scriptLoad not supported for \"' + key + '\"');\n      }\n    }\n    else if (metadata.load.scriptLoad !== false && !metadata.load.pluginKey && supportsScriptLoad) {\n      // auto script load AMD, global without deps\n      if (!metadata.load.deps && !metadata.load.globals &&\n          (metadata.load.format === 'system' || metadata.load.format === 'register' || metadata.load.format === 'global' && metadata.load.exports))\n        metadata.load.scriptLoad = true;\n    }\n\n    // fetch / translate / instantiate pipeline\n    if (!metadata.load.scriptLoad)\n      return initializePlugin(loader, key, metadata)\n      .then(function () {\n        return runFetchPipeline(loader, key, metadata, processAnonRegister, config.wasm);\n      })\n\n    // just script loading\n    return new Promise(function (resolve, reject) {\n      if (metadata.load.format === 'amd' && envGlobal.define !== loader.amdDefine)\n        throw new Error('Loading AMD with scriptLoad requires setting the global `' + globalName + '.define = SystemJS.amdDefine`');\n\n      scriptLoad(key, metadata.load.crossOrigin, metadata.load.integrity, function () {\n        if (!processAnonRegister()) {\n          metadata.load.format = 'global';\n          var globalValue = metadata.load.exports && getGlobalValue(metadata.load.exports);\n          loader.registerDynamic([], false, function () {\n            setMetaEsModule(metadata, globalValue);\n            return globalValue;\n          });\n          processAnonRegister();\n        }\n\n        resolve();\n      }, reject);\n    });\n  })\n  .then(function (instantiated) {\n    delete loader[METADATA][key];\n    return instantiated;\n  });\n}\n\nfunction initializePlugin (loader, key, metadata) {\n  if (!metadata.pluginKey)\n    return resolvedPromise;\n\n  return loader.import(metadata.pluginKey).then(function (plugin) {\n    metadata.pluginModule = plugin;\n    metadata.pluginLoad = {\n      name: key,\n      address: metadata.pluginArgument,\n      source: undefined,\n      metadata: metadata.load\n    };\n    metadata.load.deps = metadata.load.deps || [];\n  });\n}\n\nfunction loadBundlesAndDepCache (config, loader, key) {\n  // load direct deps, in turn will pick up their trace trees\n  var deps = config.depCache[key];\n  if (deps) {\n    for (var i = 0; i < deps.length; i++)\n      loader.normalize(deps[i], key).then(preloadScript);\n  }\n  else {\n    var matched = false;\n    for (var b in config.bundles) {\n      for (var i = 0; i < config.bundles[b].length; i++) {\n        var curModule = config.bundles[b][i];\n\n        if (curModule === key) {\n          matched = true;\n          break;\n        }\n\n        // wildcard in bundles includes / boundaries\n        if (curModule.indexOf('*') !== -1) {\n          var parts = curModule.split('*');\n          if (parts.length !== 2) {\n            config.bundles[b].splice(i--, 1);\n            continue;\n          }\n\n          if (key.substr(0, parts[0].length) === parts[0] &&\n              key.substr(key.length - parts[1].length, parts[1].length) === parts[1]) {\n            matched = true;\n            break;\n          }\n        }\n      }\n\n      if (matched)\n        return loader.import(b);\n    }\n  }\n}\n\nfunction runFetchPipeline (loader, key, metadata, processAnonRegister, wasm) {\n  if (metadata.load.exports && !metadata.load.format)\n    metadata.load.format = 'global';\n\n  return resolvedPromise\n\n  // locate\n  .then(function () {\n    if (!metadata.pluginModule || !metadata.pluginModule.locate)\n      return;\n\n    return Promise.resolve(metadata.pluginModule.locate.call(loader, metadata.pluginLoad))\n    .then(function (address) {\n      if (address)\n        metadata.pluginLoad.address = address;\n    });\n  })\n\n  // fetch\n  .then(function () {\n    if (!metadata.pluginModule)\n      return fetch$1(key, metadata.load.authorization, metadata.load.integrity, wasm);\n\n    wasm = false;\n\n    if (!metadata.pluginModule.fetch)\n      return fetch$1(metadata.pluginLoad.address, metadata.load.authorization, metadata.load.integrity, false);\n\n    return metadata.pluginModule.fetch.call(loader, metadata.pluginLoad, function (load) {\n      return fetch$1(load.address, metadata.load.authorization, metadata.load.integrity, false);\n    });\n  })\n\n  .then(function (fetched) {\n    // fetch is already a utf-8 string if not doing wasm detection\n    if (!wasm || typeof fetched === 'string')\n      return translateAndInstantiate(loader, key, fetched, metadata, processAnonRegister);\n\n    return checkInstantiateWasm(loader, fetched, processAnonRegister)\n    .then(function (wasmInstantiated) {\n      if (wasmInstantiated)\n        return;\n\n      // not wasm -> convert buffer into utf-8 string to execute as a module\n      // TextDecoder compatibility matches WASM currently. Need to keep checking this.\n      // The TextDecoder interface is documented at http://encoding.spec.whatwg.org/#interface-textdecoder\n      var stringSource = isBrowser ? new TextDecoder('utf-8').decode(new Uint8Array(fetched)) : fetched.toString();\n      return translateAndInstantiate(loader, key, stringSource, metadata, processAnonRegister);\n    });\n  });\n}\n\nfunction translateAndInstantiate (loader, key, source, metadata, processAnonRegister) {\n  return Promise.resolve(source)\n  // translate\n  .then(function (source) {\n    if (metadata.load.format === 'detect')\n      metadata.load.format = undefined;\n\n    readMetaSyntax(source, metadata);\n\n    if (!metadata.pluginModule || !metadata.pluginModule.translate)\n      return source;\n\n    metadata.pluginLoad.source = source;\n    return Promise.resolve(metadata.pluginModule.translate.call(loader, metadata.pluginLoad, metadata.traceOpts))\n    .then(function (translated) {\n      if (metadata.load.sourceMap) {\n        if (typeof metadata.load.sourceMap !== 'object')\n          throw new Error('metadata.load.sourceMap must be set to an object.');\n        sanitizeSourceMap(metadata.pluginLoad.address, metadata.load.sourceMap);\n      }\n\n      if (typeof translated === 'string')\n        return translated;\n      else\n        return metadata.pluginLoad.source;\n    });\n  })\n  .then(function (source) {\n    if (!metadata.load.format && source.substring(0, 8) === '\"bundle\"') {\n      metadata.load.format = 'system';\n      return source;\n    }\n\n    if (metadata.load.format === 'register' || !metadata.load.format && detectRegisterFormat(source)) {\n      metadata.load.format = 'register';\n      return source;\n    }\n\n    if (metadata.load.format !== 'esm' && (metadata.load.format || !source.match(esmRegEx))) {\n      return source;\n    }\n\n    metadata.load.format = 'esm';\n    return transpile(loader, source, key, metadata, processAnonRegister);\n  })\n\n  // instantiate\n  .then(function (translated) {\n    if (typeof translated !== 'string' || !metadata.pluginModule || !metadata.pluginModule.instantiate)\n      return translated;\n\n    var calledInstantiate = false;\n    metadata.pluginLoad.source = translated;\n    return Promise.resolve(metadata.pluginModule.instantiate.call(loader, metadata.pluginLoad, function (load) {\n      translated = load.source;\n      metadata.load = load.metadata;\n      if (calledInstantiate)\n        throw new Error('Instantiate must only be called once.');\n      calledInstantiate = true;\n    }))\n    .then(function (result) {\n      if (calledInstantiate)\n        return translated;\n      return protectedCreateNamespace(result);\n    });\n  })\n  .then(function (source) {\n    // plugin instantiate result case\n    if (typeof source !== 'string')\n      return source;\n\n    if (!metadata.load.format)\n      metadata.load.format = detectLegacyFormat(source);\n\n    var registered = false;\n\n    switch (metadata.load.format) {\n      case 'esm':\n      case 'register':\n      case 'system':\n        var err = evaluate(loader, source, metadata.load.sourceMap, key, metadata.load.integrity, metadata.load.nonce, false);\n        if (err)\n          throw err;\n        if (!processAnonRegister())\n          return emptyModule;\n        return;\n      break;\n\n      case 'json':\n        // warn.call(config, '\"json\" module format is deprecated.');\n        return loader.newModule({ default: JSON.parse(source), __useDefault: true });\n\n      case 'amd':\n        var curDefine = envGlobal.define;\n        envGlobal.define = loader.amdDefine;\n\n        clearLastDefine(metadata.load.deps, metadata.load.esModule);\n\n        var err = evaluate(loader, source, metadata.load.sourceMap, key, metadata.load.integrity, metadata.load.nonce, false);\n\n        // if didn't register anonymously, use the last named define if only one\n        registered = processAnonRegister();\n        if (!registered) {\n          registerLastDefine(loader);\n          registered = processAnonRegister();\n        }\n\n        envGlobal.define = curDefine;\n\n        if (err)\n          throw err;\n      break;\n\n      case 'cjs':\n        var metaDeps = metadata.load.deps;\n        var deps = (metadata.load.deps || []).concat(metadata.load.cjsRequireDetection ? getCJSDeps(source) : []);\n\n        for (var g in metadata.load.globals)\n          if (metadata.load.globals[g])\n            deps.push(metadata.load.globals[g]);\n\n        loader.registerDynamic(deps, true, function (require, exports, module) {\n          require.resolve = function (key) {\n            return requireResolve.call(loader, key, module.id);\n          };\n          // support module.paths ish\n          module.paths = [];\n          module.require = require;\n\n          // ensure meta deps execute first\n          if (!metadata.load.cjsDeferDepsExecute && metaDeps)\n            for (var i = 0; i < metaDeps.length; i++)\n              require(metaDeps[i]);\n\n          var pathVars = getPathVars(module.id);\n          var __cjsWrapper = {\n            exports: exports,\n            args: [require, exports, module, pathVars.filename, pathVars.dirname, envGlobal, envGlobal]\n          };\n\n          var cjsWrapper = \"(function (require, exports, module, __filename, __dirname, global, GLOBAL\";\n\n          // add metadata.globals to the wrapper arguments\n          if (metadata.load.globals)\n            for (var g in metadata.load.globals) {\n              __cjsWrapper.args.push(require(metadata.load.globals[g]));\n              cjsWrapper += \", \" + g;\n            }\n\n          // disable AMD detection\n          var define = envGlobal.define;\n          envGlobal.define = undefined;\n          envGlobal.__cjsWrapper = __cjsWrapper;\n\n          source = cjsWrapper + \") {\" + source.replace(hashBangRegEx, '') + \"\\n}).apply(__cjsWrapper.exports, __cjsWrapper.args);\";\n\n          var err = evaluate(loader, source, metadata.load.sourceMap, key, metadata.load.integrity, metadata.load.nonce, false);\n          if (err)\n            throw err;\n\n          setMetaEsModule(metadata, exports);\n\n          envGlobal.__cjsWrapper = undefined;\n          envGlobal.define = define;\n        });\n        registered = processAnonRegister();\n      break;\n\n      case 'global':\n        var deps = metadata.load.deps || [];\n        for (var g in metadata.load.globals) {\n          var gl = metadata.load.globals[g];\n          if (gl)\n            deps.push(gl);\n        }\n\n        loader.registerDynamic(deps, false, function (require, exports, module) {\n          var globals;\n          if (metadata.load.globals) {\n            globals = {};\n            for (var g in metadata.load.globals)\n              if (metadata.load.globals[g])\n                globals[g] = require(metadata.load.globals[g]);\n          }\n\n          var exportName = metadata.load.exports;\n\n          if (exportName)\n            source += '\\n' + globalName + '[\"' + exportName + '\"] = ' + exportName + ';';\n\n          var retrieveGlobal = prepareGlobal(module.id, exportName, globals, metadata.load.encapsulateGlobal);\n          var err = evaluate(loader, source, metadata.load.sourceMap, key, metadata.load.integrity, metadata.load.nonce, true);\n\n          if (err)\n            throw err;\n\n          var output = retrieveGlobal();\n          setMetaEsModule(metadata, output);\n          return output;\n        });\n        registered = processAnonRegister();\n      break;\n\n      default:\n        throw new TypeError('Unknown module format \"' + metadata.load.format + '\" for \"' + key + '\".' + (metadata.load.format === 'es6' ? ' Use \"esm\" instead here.' : ''));\n    }\n\n    if (!registered)\n      throw new Error('Module ' + key + ' detected as ' + metadata.load.format + ' but didn\\'t execute correctly.');\n  });\n}\n\nvar globalName = typeof self != 'undefined' ? 'self' : 'global';\n\n// good enough ES6 module detection regex - format detections not designed to be accurate, but to handle the 99% use case\nvar esmRegEx = /(^\\s*|[}\\);\\n]\\s*)(import\\s*(['\"]|(\\*\\s+as\\s+)?[^\"'\\(\\)\\n;]+\\s*from\\s*['\"]|\\{)|export\\s+\\*\\s+from\\s+[\"']|export\\s*(\\{|default|function|class|var|const|let|async\\s+function))/;\n\nvar leadingCommentAndMetaRegEx = /^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*\"[^\"]+\"\\s*;?|\\s*'[^']+'\\s*;?)*\\s*/;\nfunction detectRegisterFormat(source) {\n  var leadingCommentAndMeta = source.match(leadingCommentAndMetaRegEx);\n  return leadingCommentAndMeta && source.substr(leadingCommentAndMeta[0].length, 15) === 'System.register';\n}\n\n// AMD Module Format Detection RegEx\n// define([.., .., ..], ...)\n// define(varName); || define(function(require, exports) {}); || define({})\nvar amdRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])define\\s*\\(\\s*(\"[^\"]+\"\\s*,\\s*|'[^']+'\\s*,\\s*)?\\s*(\\[(\\s*((\"[^\"]+\"|'[^']+')\\s*,|\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*(\\s*(\"[^\"]+\"|'[^']+')\\s*,?)?(\\s*(\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*\\s*\\]|function\\s*|{|[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*\\))/;\n\n/// require('...') || exports[''] = ... || exports.asd = ... || module.exports = ...\nvar cjsExportsRegEx = /(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])(exports\\s*(\\[['\"]|\\.)|module(\\.exports|\\['exports'\\]|\\[\"exports\"\\])\\s*(\\[['\"]|[=,\\.]))/;\n// used to support leading #!/usr/bin/env in scripts as supported in Node\nvar hashBangRegEx = /^\\#\\!.*/;\n\nfunction detectLegacyFormat (source) {\n  if (source.match(amdRegEx))\n    return 'amd';\n\n  cjsExportsRegEx.lastIndex = 0;\n  cjsRequireRegEx.lastIndex = 0;\n  if (cjsRequireRegEx.exec(source) || cjsExportsRegEx.exec(source))\n    return 'cjs';\n\n  // global is the fallback format\n  return 'global';\n}\n\nfunction sanitizeSourceMap (address, sourceMap) {\n  var originalName = address.split('!')[0];\n\n  // force set the filename of the original file\n  if (!sourceMap.file || sourceMap.file == address)\n    sourceMap.file = originalName + '!transpiled';\n\n  // force set the sources list if only one source\n  if (!sourceMap.sources || sourceMap.sources.length <= 1 && (!sourceMap.sources[0] || sourceMap.sources[0] === address))\n    sourceMap.sources = [originalName];\n}\n\nfunction transpile (loader, source, key, metadata, processAnonRegister) {\n  if (!loader.transpiler)\n    throw new TypeError('Unable to dynamically transpile ES module\\n   A loader plugin needs to be configured via `SystemJS.config({ transpiler: \\'transpiler-module\\' })`.');\n\n  // deps support for es transpile\n  if (metadata.load.deps) {\n    var depsPrefix = '';\n    for (var i = 0; i < metadata.load.deps.length; i++)\n      depsPrefix += 'import \"' + metadata.load.deps[i] + '\"; ';\n    source = depsPrefix + source;\n  }\n\n  // do transpilation\n  return loader.import.call(loader, loader.transpiler)\n  .then(function (transpiler) {\n    if (transpiler.__useDefault)\n      transpiler = transpiler.default;\n\n    // translate hooks means this is a transpiler plugin instead of a raw implementation\n    if (!transpiler.translate)\n      throw new Error(loader.transpiler + ' is not a valid transpiler plugin.');\n\n    // if transpiler is the same as the plugin loader, then don't run twice\n    if (transpiler === metadata.pluginModule)\n      return source;\n\n    // convert the source map into an object for transpilation chaining\n    if (typeof metadata.load.sourceMap === 'string')\n      metadata.load.sourceMap = JSON.parse(metadata.load.sourceMap);\n\n    metadata.pluginLoad = metadata.pluginLoad || {\n      name: key,\n      address: key,\n      source: source,\n      metadata: metadata.load\n    };\n    metadata.load.deps = metadata.load.deps || [];\n\n    return Promise.resolve(transpiler.translate.call(loader, metadata.pluginLoad, metadata.traceOpts))\n    .then(function (source) {\n      // sanitize sourceMap if an object not a JSON string\n      var sourceMap = metadata.load.sourceMap;\n      if (sourceMap && typeof sourceMap === 'object')\n        sanitizeSourceMap(key, sourceMap);\n\n      if (metadata.load.format === 'esm' && detectRegisterFormat(source))\n        metadata.load.format = 'register';\n\n      return source;\n    });\n  }, function (err) {\n    throw LoaderError__Check_error_message_for_loader_stack(err, 'Unable to load transpiler to transpile ' + key);\n  });\n}\n\n// detect any meta header syntax\n// only set if not already set\nvar metaRegEx = /^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*\"[^\"]+\"\\s*;?|\\s*'[^']+'\\s*;?)+/;\nvar metaPartRegEx = /\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\/\\/[^\\n]*|\"[^\"]+\"\\s*;?|'[^']+'\\s*;?/g;\n\nfunction setMetaProperty(target, p, value) {\n  var pParts = p.split('.');\n  var curPart;\n  while (pParts.length > 1) {\n    curPart = pParts.shift();\n    target = target[curPart] = target[curPart] || {};\n  }\n  curPart = pParts.shift();\n  if (target[curPart] === undefined)\n    target[curPart] = value;\n}\n\nfunction readMetaSyntax (source, metadata) {\n  var meta = source.match(metaRegEx);\n  if (!meta)\n    return;\n\n  var metaParts = meta[0].match(metaPartRegEx);\n\n  for (var i = 0; i < metaParts.length; i++) {\n    var curPart = metaParts[i];\n    var len = curPart.length;\n\n    var firstChar = curPart.substr(0, 1);\n    if (curPart.substr(len - 1, 1) == ';')\n      len--;\n\n    if (firstChar != '\"' && firstChar != \"'\")\n      continue;\n\n    var metaString = curPart.substr(1, curPart.length - 3);\n    var metaName = metaString.substr(0, metaString.indexOf(' '));\n\n    if (metaName) {\n      var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);\n\n      if (metaName === 'deps')\n        metaName = 'deps[]';\n\n      if (metaName.substr(metaName.length - 2, 2) === '[]') {\n        metaName = metaName.substr(0, metaName.length - 2);\n        metadata.load[metaName] = metadata.load[metaName] || [];\n        metadata.load[metaName].push(metaValue);\n      }\n      // \"use strict\" is not meta\n      else if (metaName !== 'use') {\n        setMetaProperty(metadata.load, metaName, metaValue);\n      }\n    }\n    else {\n      metadata.load[metaString] = true;\n    }\n  }\n}\n\nvar scriptSrc;\n\n// Promise detection and error message\nif (typeof Promise === 'undefined')\n  throw new Error('SystemJS needs a Promise polyfill.');\n\nif (typeof document !== 'undefined') {\n  var scripts = document.getElementsByTagName('script');\n  var curScript = scripts[scripts.length - 1];\n  if (document.currentScript && (curScript.defer || curScript.async))\n    curScript = document.currentScript;\n\n  scriptSrc = curScript && curScript.src;\n}\n// worker\nelse if (typeof importScripts !== 'undefined') {\n  try {\n    throw new Error('_');\n  }\n  catch (e) {\n    e.stack.replace(/(?:at|@).*(http.+):[\\d]+:[\\d]+/, function(m, url) {\n      scriptSrc = url;\n    });\n  }\n}\n// node\nelse if (typeof __filename !== 'undefined') {\n  scriptSrc = __filename;\n}\n\nfunction SystemJSLoader$1 () {\n  RegisterLoader$1.call(this);\n\n  // NB deprecate\n  this._loader = {};\n\n  // internal metadata store\n  this[METADATA] = {};\n\n  // internal configuration\n  this[CONFIG] = {\n    baseURL: baseURI,\n    paths: {},\n\n    packageConfigPaths: [],\n    packageConfigKeys: [],\n    map: {},\n    packages: {},\n    depCache: {},\n    meta: {},\n    bundles: {},\n\n    production: false,\n\n    transpiler: undefined,\n    loadedBundles: {},\n\n    // global behaviour flags\n    warnings: false,\n    pluginFirst: false,\n\n    // enable wasm loading and detection when supported\n    wasm: false\n  };\n\n  // make the location of the system.js script accessible (if any)\n  this.scriptSrc = scriptSrc;\n\n  this._nodeRequire = nodeRequire;\n\n  // support the empty module, as a concept\n  this.registry.set('@empty', emptyModule);\n\n  setProduction.call(this, false, false);\n\n  // add module format helpers\n  formatHelpers(this);\n}\n\nvar envModule;\nfunction setProduction (isProduction, isBuilder) {\n  this[CONFIG].production = isProduction;\n  this.registry.set('@system-env', envModule = this.newModule({\n    browser: isBrowser,\n    node: !!this._nodeRequire,\n    production: !isBuilder && isProduction,\n    dev: isBuilder || !isProduction,\n    build: isBuilder,\n    'default': true\n  }));\n}\n\nSystemJSLoader$1.prototype = Object.create(RegisterLoader$1.prototype);\n\nSystemJSLoader$1.prototype.constructor = SystemJSLoader$1;\n\n// NB deprecate normalize\nSystemJSLoader$1.prototype[SystemJSLoader$1.resolve = RegisterLoader$1.resolve] = SystemJSLoader$1.prototype.normalize = normalize;\n\nSystemJSLoader$1.prototype.load = function (key, parentKey) {\n  warn.call(this[CONFIG], 'System.load is deprecated.');\n  return this.import(key, parentKey);\n};\n\n// NB deprecate decanonicalize, normalizeSync\nSystemJSLoader$1.prototype.decanonicalize = SystemJSLoader$1.prototype.normalizeSync = SystemJSLoader$1.prototype.resolveSync = normalizeSync;\n\nSystemJSLoader$1.prototype[SystemJSLoader$1.instantiate = RegisterLoader$1.instantiate] = instantiate$1;\n\nSystemJSLoader$1.prototype.config = setConfig;\nSystemJSLoader$1.prototype.getConfig = getConfig;\n\nSystemJSLoader$1.prototype.global = envGlobal;\n\nSystemJSLoader$1.prototype.import = function () {\n  return RegisterLoader$1.prototype.import.apply(this, arguments)\n  .then(function (m) {\n    return m.__useDefault ? m.default: m;\n  });\n};\n\nvar configNames = ['baseURL', 'map', 'paths', 'packages', 'packageConfigPaths', 'depCache', 'meta', 'bundles', 'transpiler', 'warnings', 'pluginFirst', 'production', 'wasm'];\n\nvar hasProxy = typeof Proxy !== 'undefined';\nfor (var i = 0; i < configNames.length; i++) (function (configName) {\n  Object.defineProperty(SystemJSLoader$1.prototype, configName, {\n    get: function () {\n      var cfg = getConfigItem(this[CONFIG], configName);\n\n      if (hasProxy && typeof cfg === 'object')\n        cfg = new Proxy(cfg, {\n          set: function (target, option) {\n            throw new Error('Cannot set SystemJS.' + configName + '[\"' + option + '\"] directly. Use SystemJS.config({ ' + configName + ': { \"' + option + '\": ... } }) rather.');\n          }\n        });\n\n      //if (typeof cfg === 'object')\n      //  warn.call(this[CONFIG], 'Referencing `SystemJS.' + configName + '` is deprecated. Use the config getter `SystemJS.getConfig(\\'' + configName + '\\')`');\n      return cfg;\n    },\n    set: function (name) {\n      throw new Error('Setting `SystemJS.' + configName + '` directly is no longer supported. Use `SystemJS.config({ ' + configName + ': ... })`.');\n    }\n  });\n})(configNames[i]);\n\n/*\n * Backwards-compatible registry API, to be deprecated\n */\nfunction registryWarn(loader, method) {\n  warn.call(loader[CONFIG], 'SystemJS.' + method + ' is deprecated for SystemJS.registry.' + method);\n}\nSystemJSLoader$1.prototype.delete = function (key) {\n  registryWarn(this, 'delete');\n  this.registry.delete(key);\n};\nSystemJSLoader$1.prototype.get = function (key) {\n  registryWarn(this, 'get');\n  return this.registry.get(key);\n};\nSystemJSLoader$1.prototype.has = function (key) {\n  registryWarn(this, 'has');\n  return this.registry.has(key);\n};\nSystemJSLoader$1.prototype.set = function (key, module) {\n  registryWarn(this, 'set');\n  return this.registry.set(key, module);\n};\nSystemJSLoader$1.prototype.newModule = function (bindings) {\n  return new ModuleNamespace(bindings);\n};\nSystemJSLoader$1.prototype.isModule = isModule;\n\n// ensure System.register and System.registerDynamic decanonicalize\nSystemJSLoader$1.prototype.register = function (key, deps, declare) {\n  if (typeof key === 'string')\n    key = decanonicalize.call(this, this[CONFIG], key);\n  return RegisterLoader$1.prototype.register.call(this, key, deps, declare);\n};\n\nSystemJSLoader$1.prototype.registerDynamic = function (key, deps, executingRequire, execute) {\n  if (typeof key === 'string')\n    key = decanonicalize.call(this, this[CONFIG], key);\n  return RegisterLoader$1.prototype.registerDynamic.call(this, key, deps, executingRequire, execute);\n};\n\nSystemJSLoader$1.prototype.version = \"0.20.12 Dev\";\n\nvar System = new SystemJSLoader$1();\n\n// only set the global System on the global in browsers\nif (isBrowser || isWorker)\n  envGlobal.SystemJS = envGlobal.System = System;\n\nif (typeof module !== 'undefined' && module.exports)\n  module.exports = System;\n\n}());\n//# sourceMappingURL=system.src.js.map\n"}